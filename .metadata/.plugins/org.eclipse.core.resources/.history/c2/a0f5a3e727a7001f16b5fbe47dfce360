#include "stm32f4xx_hal.h"
#include "NRF24L01.h"

extern SPI_HandleTypeDef hspi1;
#define NRF24_SPI &hspi1

#define NRF24_CE_PORT GPIOB
#define NRF24_CE_PIN GPIO_PIN_6

#define NRF24_CSN_PORT GPIOA
#define NRF24_CSN_PIN GPIO_PIN_8

void CS_Select (){
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
}

void CS_UnSelect (){
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
}

void CE_Enable (){
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
}

void CE_Disable (){
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
}
// Write a single byte of data to the register
void nrf24_WriteReg (uint8_t Reg, uint8_t data)
{
	uint8_t buf[2];
	buf[0] = Reg | 1<<5;
	buf[1] = data;

	CS_Select();

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);

	CS_UnSelect();
}
// Write multiple bytes starting from the register
void nrf24_WriteRegMulti(uint8_t Reg, uint8_t *data, int size)
{
	uint8_t buf[2];
	Reg |= 1<<5;

	CS_Select();

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);

	CS_UnSelect();
}

//Read the byte at Reg
uint8_t nrf24_ReadReg(uint8_t Reg)
{
	uint8_t data = 0;
	CS_Select();

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);

	CS_UnSelect();

	return data;
}

//Read size Bytes starting at Reg
void nrf24_ReadRegMulti(uint8_t Reg, uint8_t *data, int size)
{
	CS_Select();

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
	HAL_SPI_Receive(NRF24_SPI, &data, size, 1000);

	CS_UnSelect();
}

//Send a command to the NRF24
void nrfsendCmd (uint8_t cmd)
{
	CS_Select();

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);

	CS_UnSelect();
}

void NRF24_Init ()
{
	CE_Disable();

	nrf24_WriteReg(CONFIG, 0); // Will be set up later

	nrf24_WriteReg(EN_AA, 0); // No Acknowledgment of reception

	nrf24_WriteReg(EN_RXADDR, 0); // No data pipes for RX/TX

	nrf24_WriteReg(SETUP_AW, 0x03); // 5 bytes for TX/RX addresses

	nrf24_WriteReg(SETUP_RETR, 0); // No retransmission

	nrf24_WriteReg(RF_CH, 0); // Will be setup when doing TX or RX

	nrf24_WriteReg(RF_SETUP, 0x0E); // Power = 0db, data rate = 2Mbps

	CE_Enable();
}

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
	CE_Disable();

	nrf24_WriteReg(RF_CH, channel); // Select Channel

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);

	uint8_t config = nrf24_ReadReg(CONFIG);

	config = config | (1 << 1);

	nrf24_WriteReg(CONFIG, config);


	CE_Enable();
}


uint8_t NRF24_Transmit (uint8_t *data)
{
	uint8_t cmdtosend = 0;
	CS_Select();

	cmdtosend = W_TX_PAYLOAD;
	nrfsendCmd(cmdtosend);

	HAL_SPI_Transmit(NRF24_SPI, data , 32, 1000);

	CS_UnSelect();

	HAL_Delay(1);

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);

	if ((fifostatus >> 4) & 1 && !(fifostatus & (1<<3))){
		cmdtosend = FLUSH_TX;
		nrfsendCmd(cmdtosend);
		return 1;
	}

	return 0;
}

uint8_t NRF24_RXMode(uint8_t *Address, uint8_t channel)
{
	CE_Disable();


	nrf24_WriteReg(RF_CH, channel); // Select Channel

	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);

	en_rxaddr |= 1 << 1;
	nrf24_WriteReg(EN_RXADDR, en_rxaddr); //Select Data pipe 1

	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);

	nrf24_WriteReg(RX_PW_P1, 32); //32 Byte Payload

	uint8_t config = nrf24_ReadReg(CONFIG);

	config = config | (1 << 1) | (1 << 0);

	nrf24_WriteReg(CONFIG, config);


	CE_Enable();
}

uint8_t isDataAvailable(int pipenum)
{
	uint8_t status = nrf24_ReadReg(STATUS);

	if (status & (1 << 6){

	}
}

