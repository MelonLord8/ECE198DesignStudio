
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004c8c  08004c8c  00005c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ca4  08004ca4  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  08004ca4  08004ca4  00005ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cac  08004cac  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cac  08004cac  00005cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cb0  08004cb0  00005cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004cb4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000014  08004cc8  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08004cc8  000061b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fac2  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c7  00000000  00000000  00015b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00017bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd1  00000000  00000000  00018ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017adc  00000000  00000000  000196b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c12  00000000  00000000  0003118d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ad32  00000000  00000000  00041d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dcad1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004018  00000000  00000000  000dcb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000e0b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004c74 	.word	0x08004c74

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08004c74 	.word	0x08004c74

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <CS_Select>:
#define NRF24_CE_PIN GPIO_PIN_6

#define NRF24_CSN_PORT GPIOA
#define NRF24_CSN_PIN GPIO_PIN_8

void CS_Select (){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004ce:	4802      	ldr	r0, [pc, #8]	@ (80004d8 <CS_Select+0x14>)
 80004d0:	f001 fd26 	bl	8001f20 <HAL_GPIO_WritePin>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40020000 	.word	0x40020000

080004dc <CS_UnSelect>:

void CS_UnSelect (){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004e6:	4802      	ldr	r0, [pc, #8]	@ (80004f0 <CS_UnSelect+0x14>)
 80004e8:	f001 fd1a 	bl	8001f20 <HAL_GPIO_WritePin>
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40020000 	.word	0x40020000

080004f4 <CE_Enable>:

void CE_Enable (){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2140      	movs	r1, #64	@ 0x40
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <CE_Enable+0x14>)
 80004fe:	f001 fd0f 	bl	8001f20 <HAL_GPIO_WritePin>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020400 	.word	0x40020400

0800050c <CE_Disable>:

void CE_Disable (){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2140      	movs	r1, #64	@ 0x40
 8000514:	4802      	ldr	r0, [pc, #8]	@ (8000520 <CE_Disable+0x14>)
 8000516:	f001 fd03 	bl	8001f20 <HAL_GPIO_WritePin>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40020400 	.word	0x40020400

08000524 <nrf24_WriteReg>:
// Write a single byte of data to the register
void nrf24_WriteReg (uint8_t Reg, uint8_t data)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	460a      	mov	r2, r1
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	4613      	mov	r3, r2
 8000532:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg | 1<<5;
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	f043 0320 	orr.w	r3, r3, #32
 800053a:	b2db      	uxtb	r3, r3
 800053c:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 800053e:	79bb      	ldrb	r3, [r7, #6]
 8000540:	737b      	strb	r3, [r7, #13]

	CS_Select();
 8000542:	f7ff ffbf 	bl	80004c4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000546:	f107 010c 	add.w	r1, r7, #12
 800054a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800054e:	2202      	movs	r2, #2
 8000550:	4804      	ldr	r0, [pc, #16]	@ (8000564 <nrf24_WriteReg+0x40>)
 8000552:	f002 fa20 	bl	8002996 <HAL_SPI_Transmit>

	CS_UnSelect();
 8000556:	f7ff ffc1 	bl	80004dc <CS_UnSelect>
}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000078 	.word	0x20000078

08000568 <nrf24_WriteRegMulti>:
// Write multiple bytes starting from the register
void nrf24_WriteRegMulti(uint8_t Reg, uint8_t *data, int size)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
 8000574:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	Reg |= 1<<5;
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	f043 0320 	orr.w	r3, r3, #32
 800057c:	b2db      	uxtb	r3, r3
 800057e:	73fb      	strb	r3, [r7, #15]

	CS_Select();
 8000580:	f7ff ffa0 	bl	80004c4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000584:	f107 010f 	add.w	r1, r7, #15
 8000588:	2364      	movs	r3, #100	@ 0x64
 800058a:	2201      	movs	r2, #1
 800058c:	4808      	ldr	r0, [pc, #32]	@ (80005b0 <nrf24_WriteRegMulti+0x48>)
 800058e:	f002 fa02 	bl	8002996 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	b29a      	uxth	r2, r3
 8000596:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800059a:	68b9      	ldr	r1, [r7, #8]
 800059c:	4804      	ldr	r0, [pc, #16]	@ (80005b0 <nrf24_WriteRegMulti+0x48>)
 800059e:	f002 f9fa 	bl	8002996 <HAL_SPI_Transmit>

	CS_UnSelect();
 80005a2:	f7ff ff9b 	bl	80004dc <CS_UnSelect>
}
 80005a6:	bf00      	nop
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000078 	.word	0x20000078

080005b4 <nrf24_ReadReg>:

//Read the byte at Reg
uint8_t nrf24_ReadReg(uint8_t Reg)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	73fb      	strb	r3, [r7, #15]
	CS_Select();
 80005c2:	f7ff ff7f 	bl	80004c4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80005c6:	1df9      	adds	r1, r7, #7
 80005c8:	2364      	movs	r3, #100	@ 0x64
 80005ca:	2201      	movs	r2, #1
 80005cc:	4808      	ldr	r0, [pc, #32]	@ (80005f0 <nrf24_ReadReg+0x3c>)
 80005ce:	f002 f9e2 	bl	8002996 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 80005d2:	f107 010f 	add.w	r1, r7, #15
 80005d6:	2364      	movs	r3, #100	@ 0x64
 80005d8:	2201      	movs	r2, #1
 80005da:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <nrf24_ReadReg+0x3c>)
 80005dc:	f002 fb1f 	bl	8002c1e <HAL_SPI_Receive>

	CS_UnSelect();
 80005e0:	f7ff ff7c 	bl	80004dc <CS_UnSelect>

	return data;
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000078 	.word	0x20000078

080005f4 <nrfsendCmd>:
	CS_UnSelect();
}

//Send a command to the NRF24
void nrfsendCmd (uint8_t cmd)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	CS_Select();
 80005fe:	f7ff ff61 	bl	80004c4 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000602:	1df9      	adds	r1, r7, #7
 8000604:	2364      	movs	r3, #100	@ 0x64
 8000606:	2201      	movs	r2, #1
 8000608:	4804      	ldr	r0, [pc, #16]	@ (800061c <nrfsendCmd+0x28>)
 800060a:	f002 f9c4 	bl	8002996 <HAL_SPI_Transmit>

	CS_UnSelect();
 800060e:	f7ff ff65 	bl	80004dc <CS_UnSelect>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000078 	.word	0x20000078

08000620 <NRF24_Init>:

void NRF24_Init ()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	CE_Disable();
 8000624:	f7ff ff72 	bl	800050c <CE_Disable>

	nrf24_WriteReg(CONFIG, 0); // Will be set up later
 8000628:	2100      	movs	r1, #0
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ff7a 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0); // No Acknowledgment of reception
 8000630:	2100      	movs	r1, #0
 8000632:	2001      	movs	r0, #1
 8000634:	f7ff ff76 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg(EN_RXADDR, 0); // No data pipes for RX/TX
 8000638:	2100      	movs	r1, #0
 800063a:	2002      	movs	r0, #2
 800063c:	f7ff ff72 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg(SETUP_AW, 0x03); // 5 bytes for TX/RX addresses
 8000640:	2103      	movs	r1, #3
 8000642:	2003      	movs	r0, #3
 8000644:	f7ff ff6e 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg(SETUP_RETR, 0); // No retransmission
 8000648:	2100      	movs	r1, #0
 800064a:	2004      	movs	r0, #4
 800064c:	f7ff ff6a 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg(RF_CH, 0); // Will be setup when doing TX or RX
 8000650:	2100      	movs	r1, #0
 8000652:	2005      	movs	r0, #5
 8000654:	f7ff ff66 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteReg(RF_SETUP, 0x0E); // Power = 0db, data rate = 2Mbps
 8000658:	210e      	movs	r1, #14
 800065a:	2006      	movs	r0, #6
 800065c:	f7ff ff62 	bl	8000524 <nrf24_WriteReg>

	CE_Enable();
 8000660:	f7ff ff48 	bl	80004f4 <CE_Enable>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <NRF24_TxMode>:

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	70fb      	strb	r3, [r7, #3]
	CE_Disable();
 8000674:	f7ff ff4a 	bl	800050c <CE_Disable>

	nrf24_WriteReg(RF_CH, channel); // Select Channel
 8000678:	78fb      	ldrb	r3, [r7, #3]
 800067a:	4619      	mov	r1, r3
 800067c:	2005      	movs	r0, #5
 800067e:	f7ff ff51 	bl	8000524 <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);
 8000682:	2205      	movs	r2, #5
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	2010      	movs	r0, #16
 8000688:	f7ff ff6e 	bl	8000568 <nrf24_WriteRegMulti>

	uint8_t config = nrf24_ReadReg(CONFIG);
 800068c:	2000      	movs	r0, #0
 800068e:	f7ff ff91 	bl	80005b4 <nrf24_ReadReg>
 8000692:	4603      	mov	r3, r0
 8000694:	73fb      	strb	r3, [r7, #15]

	config = config | (1 << 1);
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	73fb      	strb	r3, [r7, #15]

	nrf24_WriteReg(CONFIG, config);
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	4619      	mov	r1, r3
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff ff3e 	bl	8000524 <nrf24_WriteReg>


	CE_Enable();
 80006a8:	f7ff ff24 	bl	80004f4 <CE_Enable>
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <NRF24_Transmit>:


uint8_t NRF24_Transmit (uint8_t *data)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	73fb      	strb	r3, [r7, #15]
	CS_Select();
 80006c0:	f7ff ff00 	bl	80004c4 <CS_Select>

	cmdtosend = W_TX_PAYLOAD;
 80006c4:	23a0      	movs	r3, #160	@ 0xa0
 80006c6:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ff92 	bl	80005f4 <nrfsendCmd>

	HAL_SPI_Transmit(NRF24_SPI, data , 32, 1000);
 80006d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d4:	2220      	movs	r2, #32
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	4812      	ldr	r0, [pc, #72]	@ (8000724 <NRF24_Transmit+0x70>)
 80006da:	f002 f95c 	bl	8002996 <HAL_SPI_Transmit>

	CS_UnSelect();
 80006de:	f7ff fefd 	bl	80004dc <CS_UnSelect>

	HAL_Delay(1);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f000 fdb4 	bl	8001250 <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 80006e8:	2017      	movs	r0, #23
 80006ea:	f7ff ff63 	bl	80005b4 <nrf24_ReadReg>
 80006ee:	4603      	mov	r3, r0
 80006f0:	73bb      	strb	r3, [r7, #14]

	if ((fifostatus >> 4) & 1 && !(fifostatus & (1<<3))){
 80006f2:	7bbb      	ldrb	r3, [r7, #14]
 80006f4:	091b      	lsrs	r3, r3, #4
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d00c      	beq.n	800071a <NRF24_Transmit+0x66>
 8000700:	7bbb      	ldrb	r3, [r7, #14]
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	2b00      	cmp	r3, #0
 8000708:	d107      	bne.n	800071a <NRF24_Transmit+0x66>
		cmdtosend = FLUSH_TX;
 800070a:	23e1      	movs	r3, #225	@ 0xe1
 800070c:	73fb      	strb	r3, [r7, #15]
		nrfsendCmd(cmdtosend);
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff6f 	bl	80005f4 <nrfsendCmd>
		return 1;
 8000716:	2301      	movs	r3, #1
 8000718:	e000      	b.n	800071c <NRF24_Transmit+0x68>
	}

	return 0;
 800071a:	2300      	movs	r3, #0
}
 800071c:	4618      	mov	r0, r3
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000078 	.word	0x20000078

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072c:	f000 fd1e 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000730:	f000 f82a 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000734:	f000 fa54 	bl	8000be0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000738:	f000 fa28 	bl	8000b8c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800073c:	f000 f918 	bl	8000970 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000740:	f000 f9b8 	bl	8000ab4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000744:	f000 f88c 	bl	8000860 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000748:	f000 f8dc 	bl	8000904 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800074c:	480a      	ldr	r0, [pc, #40]	@ (8000778 <main+0x50>)
 800074e:	f002 febb 	bl	80034c8 <HAL_TIM_Base_Start_IT>
  HAL_Delay(500);
 8000752:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000756:	f000 fd7b 	bl	8001250 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800075a:	2108      	movs	r1, #8
 800075c:	4807      	ldr	r0, [pc, #28]	@ (800077c <main+0x54>)
 800075e:	f002 ff6f 	bl	8003640 <HAL_TIM_PWM_Start>

  HAL_ADC_Start(&hadc1);
 8000762:	4807      	ldr	r0, [pc, #28]	@ (8000780 <main+0x58>)
 8000764:	f000 fddc 	bl	8001320 <HAL_ADC_Start>

  NRF24_Init();
 8000768:	f7ff ff5a 	bl	8000620 <NRF24_Init>

  NRF24_TxMode(TxAddress, 10);
 800076c:	210a      	movs	r1, #10
 800076e:	4805      	ldr	r0, [pc, #20]	@ (8000784 <main+0x5c>)
 8000770:	f7ff ff7a 	bl	8000668 <NRF24_TxMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <main+0x4c>
 8000778:	20000118 	.word	0x20000118
 800077c:	200000d0 	.word	0x200000d0
 8000780:	20000030 	.word	0x20000030
 8000784:	20000000 	.word	0x20000000

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b094      	sub	sp, #80	@ 0x50
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	2230      	movs	r2, #48	@ 0x30
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f004 fa40 	bl	8004c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	4b29      	ldr	r3, [pc, #164]	@ (8000858 <SystemClock_Config+0xd0>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	4a28      	ldr	r2, [pc, #160]	@ (8000858 <SystemClock_Config+0xd0>)
 80007b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80007bc:	4b26      	ldr	r3, [pc, #152]	@ (8000858 <SystemClock_Config+0xd0>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	4b23      	ldr	r3, [pc, #140]	@ (800085c <SystemClock_Config+0xd4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007d4:	4a21      	ldr	r2, [pc, #132]	@ (800085c <SystemClock_Config+0xd4>)
 80007d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <SystemClock_Config+0xd4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e8:	2302      	movs	r3, #2
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ec:	2301      	movs	r3, #1
 80007ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f0:	2310      	movs	r3, #16
 80007f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f4:	2302      	movs	r3, #2
 80007f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f8:	2300      	movs	r3, #0
 80007fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007fc:	2310      	movs	r3, #16
 80007fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000800:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000804:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000806:	2304      	movs	r3, #4
 8000808:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800080a:	2307      	movs	r3, #7
 800080c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	4618      	mov	r0, r3
 8000814:	f001 fb9e 	bl	8001f54 <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800081e:	f000 fab7 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	230f      	movs	r3, #15
 8000824:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000826:	2302      	movs	r3, #2
 8000828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000832:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2102      	movs	r1, #2
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fe00 	bl	8002444 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800084a:	f000 faa1 	bl	8000d90 <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3750      	adds	r7, #80	@ 0x50
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	40007000 	.word	0x40007000

08000860 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000866:	463b      	mov	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000872:	4b21      	ldr	r3, [pc, #132]	@ (80008f8 <MX_ADC1_Init+0x98>)
 8000874:	4a21      	ldr	r2, [pc, #132]	@ (80008fc <MX_ADC1_Init+0x9c>)
 8000876:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000878:	4b1f      	ldr	r3, [pc, #124]	@ (80008f8 <MX_ADC1_Init+0x98>)
 800087a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800087e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000880:	4b1d      	ldr	r3, [pc, #116]	@ (80008f8 <MX_ADC1_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000886:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <MX_ADC1_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800088c:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <MX_ADC1_Init+0x98>)
 800088e:	2201      	movs	r2, #1
 8000890:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000892:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <MX_ADC1_Init+0x98>)
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089a:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <MX_ADC1_Init+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a0:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <MX_ADC1_Init+0x98>)
 80008a2:	4a17      	ldr	r2, [pc, #92]	@ (8000900 <MX_ADC1_Init+0xa0>)
 80008a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a6:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <MX_ADC1_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_ADC1_Init+0x98>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_ADC1_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_ADC1_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c0:	480d      	ldr	r0, [pc, #52]	@ (80008f8 <MX_ADC1_Init+0x98>)
 80008c2:	f000 fce9 	bl	8001298 <HAL_ADC_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008cc:	f000 fa60 	bl	8000d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008d4:	2301      	movs	r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_ADC1_Init+0x98>)
 80008e2:	f000 fe69 	bl	80015b8 <HAL_ADC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008ec:	f000 fa50 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000030 	.word	0x20000030
 80008fc:	40012000 	.word	0x40012000
 8000900:	0f000001 	.word	0x0f000001

08000904 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000908:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_SPI1_Init+0x64>)
 800090a:	4a18      	ldr	r2, [pc, #96]	@ (800096c <MX_SPI1_Init+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800090e:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <MX_SPI1_Init+0x64>)
 8000910:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000914:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_SPI1_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_SPI1_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_SPI1_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_SPI1_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <MX_SPI1_Init+0x64>)
 8000930:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000934:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_SPI1_Init+0x64>)
 8000938:	2218      	movs	r2, #24
 800093a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093c:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <MX_SPI1_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_SPI1_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <MX_SPI1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_SPI1_Init+0x64>)
 8000950:	220a      	movs	r2, #10
 8000952:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	@ (8000968 <MX_SPI1_Init+0x64>)
 8000956:	f001 ff95 	bl	8002884 <HAL_SPI_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000960:	f000 fa16 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000078 	.word	0x20000078
 800096c:	40013000 	.word	0x40013000

08000970 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b096      	sub	sp, #88	@ 0x58
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2220      	movs	r2, #32
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f004 f937 	bl	8004c1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ae:	4b3f      	ldr	r3, [pc, #252]	@ (8000aac <MX_TIM1_Init+0x13c>)
 80009b0:	4a3f      	ldr	r2, [pc, #252]	@ (8000ab0 <MX_TIM1_Init+0x140>)
 80009b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80009b4:	4b3d      	ldr	r3, [pc, #244]	@ (8000aac <MX_TIM1_Init+0x13c>)
 80009b6:	2253      	movs	r2, #83	@ 0x53
 80009b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ba:	4b3c      	ldr	r3, [pc, #240]	@ (8000aac <MX_TIM1_Init+0x13c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80009c0:	4b3a      	ldr	r3, [pc, #232]	@ (8000aac <MX_TIM1_Init+0x13c>)
 80009c2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b38      	ldr	r3, [pc, #224]	@ (8000aac <MX_TIM1_Init+0x13c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ce:	4b37      	ldr	r3, [pc, #220]	@ (8000aac <MX_TIM1_Init+0x13c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d4:	4b35      	ldr	r3, [pc, #212]	@ (8000aac <MX_TIM1_Init+0x13c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009da:	4834      	ldr	r0, [pc, #208]	@ (8000aac <MX_TIM1_Init+0x13c>)
 80009dc:	f002 fd24 	bl	8003428 <HAL_TIM_Base_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80009e6:	f000 f9d3 	bl	8000d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009f0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009f4:	4619      	mov	r1, r3
 80009f6:	482d      	ldr	r0, [pc, #180]	@ (8000aac <MX_TIM1_Init+0x13c>)
 80009f8:	f003 f8de 	bl	8003bb8 <HAL_TIM_ConfigClockSource>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a02:	f000 f9c5 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a06:	4829      	ldr	r0, [pc, #164]	@ (8000aac <MX_TIM1_Init+0x13c>)
 8000a08:	f002 fdc0 	bl	800358c <HAL_TIM_PWM_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a12:	f000 f9bd 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a16:	2320      	movs	r3, #32
 8000a18:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a1e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a22:	4619      	mov	r1, r3
 8000a24:	4821      	ldr	r0, [pc, #132]	@ (8000aac <MX_TIM1_Init+0x13c>)
 8000a26:	f003 fd61 	bl	80044ec <HAL_TIMEx_MasterConfigSynchronization>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a30:	f000 f9ae 	bl	8000d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a34:	2360      	movs	r3, #96	@ 0x60
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 320;
 8000a38:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a42:	2300      	movs	r3, #0
 8000a44:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a56:	2208      	movs	r2, #8
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4814      	ldr	r0, [pc, #80]	@ (8000aac <MX_TIM1_Init+0x13c>)
 8000a5c:	f002 ffea 	bl	8003a34 <HAL_TIM_PWM_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000a66:	f000 f993 	bl	8000d90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4807      	ldr	r0, [pc, #28]	@ (8000aac <MX_TIM1_Init+0x13c>)
 8000a8e:	f003 fd9b 	bl	80045c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000a98:	f000 f97a 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a9c:	4803      	ldr	r0, [pc, #12]	@ (8000aac <MX_TIM1_Init+0x13c>)
 8000a9e:	f000 fa6d 	bl	8000f7c <HAL_TIM_MspPostInit>

}
 8000aa2:	bf00      	nop
 8000aa4:	3758      	adds	r7, #88	@ 0x58
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000d0 	.word	0x200000d0
 8000ab0:	40010000 	.word	0x40010000

08000ab4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	@ 0x30
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aba:	f107 0320 	add.w	r3, r7, #32
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ae0:	4b29      	ldr	r3, [pc, #164]	@ (8000b88 <MX_TIM2_Init+0xd4>)
 8000ae2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ae6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000ae8:	4b27      	ldr	r3, [pc, #156]	@ (8000b88 <MX_TIM2_Init+0xd4>)
 8000aea:	2253      	movs	r2, #83	@ 0x53
 8000aec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b26      	ldr	r3, [pc, #152]	@ (8000b88 <MX_TIM2_Init+0xd4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 277-1;
 8000af4:	4b24      	ldr	r3, [pc, #144]	@ (8000b88 <MX_TIM2_Init+0xd4>)
 8000af6:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8000afa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afc:	4b22      	ldr	r3, [pc, #136]	@ (8000b88 <MX_TIM2_Init+0xd4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b21      	ldr	r3, [pc, #132]	@ (8000b88 <MX_TIM2_Init+0xd4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b08:	481f      	ldr	r0, [pc, #124]	@ (8000b88 <MX_TIM2_Init+0xd4>)
 8000b0a:	f002 fc8d 	bl	8003428 <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000b14:	f000 f93c 	bl	8000d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b1e:	f107 0320 	add.w	r3, r7, #32
 8000b22:	4619      	mov	r1, r3
 8000b24:	4818      	ldr	r0, [pc, #96]	@ (8000b88 <MX_TIM2_Init+0xd4>)
 8000b26:	f003 f847 	bl	8003bb8 <HAL_TIM_ConfigClockSource>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000b30:	f000 f92e 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000b34:	2108      	movs	r1, #8
 8000b36:	4814      	ldr	r0, [pc, #80]	@ (8000b88 <MX_TIM2_Init+0xd4>)
 8000b38:	f002 fe32 	bl	80037a0 <HAL_TIM_OnePulse_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000b42:	f000 f925 	bl	8000d90 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000b46:	2306      	movs	r3, #6
 8000b48:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	4619      	mov	r1, r3
 8000b54:	480c      	ldr	r0, [pc, #48]	@ (8000b88 <MX_TIM2_Init+0xd4>)
 8000b56:	f003 f8f6 	bl	8003d46 <HAL_TIM_SlaveConfigSynchro>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000b60:	f000 f916 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <MX_TIM2_Init+0xd4>)
 8000b72:	f003 fcbb 	bl	80044ec <HAL_TIMEx_MasterConfigSynchronization>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000b7c:	f000 f908 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	3730      	adds	r7, #48	@ 0x30
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000118 	.word	0x20000118

08000b8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b90:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	@ (8000bdc <MX_USART2_UART_Init+0x50>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b96:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bc4:	f003 fd66 	bl	8004694 <HAL_UART_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bce:	f000 f8df 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000160 	.word	0x20000160
 8000bdc:	40004400 	.word	0x40004400

08000be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	@ 0x28
 8000be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b39      	ldr	r3, [pc, #228]	@ (8000ce0 <MX_GPIO_Init+0x100>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a38      	ldr	r2, [pc, #224]	@ (8000ce0 <MX_GPIO_Init+0x100>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b36      	ldr	r3, [pc, #216]	@ (8000ce0 <MX_GPIO_Init+0x100>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b32      	ldr	r3, [pc, #200]	@ (8000ce0 <MX_GPIO_Init+0x100>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a31      	ldr	r2, [pc, #196]	@ (8000ce0 <MX_GPIO_Init+0x100>)
 8000c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce0 <MX_GPIO_Init+0x100>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce0 <MX_GPIO_Init+0x100>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a2a      	ldr	r2, [pc, #168]	@ (8000ce0 <MX_GPIO_Init+0x100>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <MX_GPIO_Init+0x100>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	4b24      	ldr	r3, [pc, #144]	@ (8000ce0 <MX_GPIO_Init+0x100>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a23      	ldr	r2, [pc, #140]	@ (8000ce0 <MX_GPIO_Init+0x100>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ce0 <MX_GPIO_Init+0x100>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000c6c:	481d      	ldr	r0, [pc, #116]	@ (8000ce4 <MX_GPIO_Init+0x104>)
 8000c6e:	f001 f957 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c78:	481b      	ldr	r0, [pc, #108]	@ (8000ce8 <MX_GPIO_Init+0x108>)
 8000c7a:	f001 f951 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c84:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4815      	ldr	r0, [pc, #84]	@ (8000cec <MX_GPIO_Init+0x10c>)
 8000c96:	f000 ffbf 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_5;
 8000c9a:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <MX_GPIO_Init+0x104>)
 8000cb4:	f000 ffb0 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_GPIO_Init+0x108>)
 8000cd2:	f000 ffa1 	bl	8001c18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	@ 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020400 	.word	0x40020400
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40020800 	.word	0x40020800

08000cf0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d00:	d13a      	bne.n	8000d78 <HAL_TIM_PeriodElapsedCallback+0x88>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d02:	f04f 31ff 	mov.w	r1, #4294967295
 8000d06:	481e      	ldr	r0, [pc, #120]	@ (8000d80 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d08:	f000 fbbe 	bl	8001488 <HAL_ADC_PollForConversion>
		//Read ADC value
		uint16_t ADC_Value = HAL_ADC_GetValue(&hadc1);
 8000d0c:	481c      	ldr	r0, [pc, #112]	@ (8000d80 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d0e:	f000 fc46 	bl	800159e <HAL_ADC_GetValue>
 8000d12:	4603      	mov	r3, r0
 8000d14:	81fb      	strh	r3, [r7, #14]
		uint16_t dust = 170*33*ADC_Value/(4096 * 10);
 8000d16:	89fb      	ldrh	r3, [r7, #14]
 8000d18:	f241 52ea 	movw	r2, #5610	@ 0x15ea
 8000d1c:	fb02 f303 	mul.w	r3, r2, r3
 8000d20:	4a18      	ldr	r2, [pc, #96]	@ (8000d84 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d22:	fb82 1203 	smull	r1, r2, r2, r3
 8000d26:	1392      	asrs	r2, r2, #14
 8000d28:	17db      	asrs	r3, r3, #31
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	81bb      	strh	r3, [r7, #12]
		total_dust += dust;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d30:	881a      	ldrh	r2, [r3, #0]
 8000d32:	89bb      	ldrh	r3, [r7, #12]
 8000d34:	4413      	add	r3, r2
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d3a:	801a      	strh	r2, [r3, #0]
		num_measurements++;
 8000d3c:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3301      	adds	r3, #1
 8000d42:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d44:	6013      	str	r3, [r2, #0]
		if (num_measurements == 100){
 8000d46:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b64      	cmp	r3, #100	@ 0x64
 8000d4c:	d114      	bne.n	8000d78 <HAL_TIM_PeriodElapsedCallback+0x88>
			total_dust /= num_measurements;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b0d      	ldr	r3, [pc, #52]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d60:	801a      	strh	r2, [r3, #0]
			uint8_t * data = (uint8_t *)&total_dust;
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d64:	60bb      	str	r3, [r7, #8]
			NRF24_Transmit(data);
 8000d66:	68b8      	ldr	r0, [r7, #8]
 8000d68:	f7ff fca4 	bl	80006b4 <NRF24_Transmit>
			total_dust = 0;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	801a      	strh	r2, [r3, #0]
			num_measurements = 0;
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000030 	.word	0x20000030
 8000d84:	66666667 	.word	0x66666667
 8000d88:	200001a8 	.word	0x200001a8
 8000d8c:	200001ac 	.word	0x200001ac

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <Error_Handler+0x8>

08000d9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000daa:	4a0f      	ldr	r2, [pc, #60]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db2:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc6:	4a08      	ldr	r2, [pc, #32]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dda:	2007      	movs	r0, #7
 8000ddc:	f000 feda 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	@ 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a17      	ldr	r2, [pc, #92]	@ (8000e68 <HAL_ADC_MspInit+0x7c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d127      	bne.n	8000e5e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b16      	ldr	r3, [pc, #88]	@ (8000e6c <HAL_ADC_MspInit+0x80>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e16:	4a15      	ldr	r2, [pc, #84]	@ (8000e6c <HAL_ADC_MspInit+0x80>)
 8000e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e1e:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <HAL_ADC_MspInit+0x80>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <HAL_ADC_MspInit+0x80>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a0e      	ldr	r2, [pc, #56]	@ (8000e6c <HAL_ADC_MspInit+0x80>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <HAL_ADC_MspInit+0x80>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <HAL_ADC_MspInit+0x84>)
 8000e5a:	f000 fedd 	bl	8001c18 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	@ 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40012000 	.word	0x40012000
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000

08000e74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	@ 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a19      	ldr	r2, [pc, #100]	@ (8000ef8 <HAL_SPI_MspInit+0x84>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d12b      	bne.n	8000eee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <HAL_SPI_MspInit+0x88>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	4a17      	ldr	r2, [pc, #92]	@ (8000efc <HAL_SPI_MspInit+0x88>)
 8000ea0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <HAL_SPI_MspInit+0x88>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <HAL_SPI_MspInit+0x88>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a10      	ldr	r2, [pc, #64]	@ (8000efc <HAL_SPI_MspInit+0x88>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_SPI_MspInit+0x88>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ece:	23e0      	movs	r3, #224	@ 0xe0
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <HAL_SPI_MspInit+0x8c>)
 8000eea:	f000 fe95 	bl	8001c18 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	@ 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40013000 	.word	0x40013000
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000

08000f04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a18      	ldr	r2, [pc, #96]	@ (8000f74 <HAL_TIM_Base_MspInit+0x70>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d10e      	bne.n	8000f34 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <HAL_TIM_Base_MspInit+0x74>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1e:	4a16      	ldr	r2, [pc, #88]	@ (8000f78 <HAL_TIM_Base_MspInit+0x74>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f26:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <HAL_TIM_Base_MspInit+0x74>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f32:	e01a      	b.n	8000f6a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f3c:	d115      	bne.n	8000f6a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <HAL_TIM_Base_MspInit+0x74>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	4a0c      	ldr	r2, [pc, #48]	@ (8000f78 <HAL_TIM_Base_MspInit+0x74>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <HAL_TIM_Base_MspInit+0x74>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	201c      	movs	r0, #28
 8000f60:	f000 fe23 	bl	8001baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f64:	201c      	movs	r0, #28
 8000f66:	f000 fe3c 	bl	8001be2 <HAL_NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40010000 	.word	0x40010000
 8000f78:	40023800 	.word	0x40023800

08000f7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a12      	ldr	r2, [pc, #72]	@ (8000fe4 <HAL_TIM_MspPostInit+0x68>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d11e      	bne.n	8000fdc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <HAL_TIM_MspPostInit+0x6c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a10      	ldr	r2, [pc, #64]	@ (8000fe8 <HAL_TIM_MspPostInit+0x6c>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <HAL_TIM_MspPostInit+0x6c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fbe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4805      	ldr	r0, [pc, #20]	@ (8000fec <HAL_TIM_MspPostInit+0x70>)
 8000fd8:	f000 fe1e 	bl	8001c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fdc:	bf00      	nop
 8000fde:	3720      	adds	r7, #32
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40010000 	.word	0x40010000
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020000 	.word	0x40020000

08000ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	@ 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a19      	ldr	r2, [pc, #100]	@ (8001074 <HAL_UART_MspInit+0x84>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d12b      	bne.n	800106a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <HAL_UART_MspInit+0x88>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	4a17      	ldr	r2, [pc, #92]	@ (8001078 <HAL_UART_MspInit+0x88>)
 800101c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001020:	6413      	str	r3, [r2, #64]	@ 0x40
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_UART_MspInit+0x88>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <HAL_UART_MspInit+0x88>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a10      	ldr	r2, [pc, #64]	@ (8001078 <HAL_UART_MspInit+0x88>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <HAL_UART_MspInit+0x88>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800104a:	230c      	movs	r3, #12
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800105a:	2307      	movs	r3, #7
 800105c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	@ (800107c <HAL_UART_MspInit+0x8c>)
 8001066:	f000 fdd7 	bl	8001c18 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800106a:	bf00      	nop
 800106c:	3728      	adds	r7, #40	@ 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40004400 	.word	0x40004400
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <NMI_Handler+0x4>

08001088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <MemManage_Handler+0x4>

08001098 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d6:	f000 f89b 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010e4:	4802      	ldr	r0, [pc, #8]	@ (80010f0 <TIM2_IRQHandler+0x10>)
 80010e6:	f002 fbb5 	bl	8003854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000118 	.word	0x20000118

080010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <SystemInit+0x20>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010fe:	4a05      	ldr	r2, [pc, #20]	@ (8001114 <SystemInit+0x20>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001150 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800111c:	f7ff ffea 	bl	80010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001120:	480c      	ldr	r0, [pc, #48]	@ (8001154 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001122:	490d      	ldr	r1, [pc, #52]	@ (8001158 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001124:	4a0d      	ldr	r2, [pc, #52]	@ (800115c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001138:	4c0a      	ldr	r4, [pc, #40]	@ (8001164 <LoopFillZerobss+0x22>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001146:	f003 fd71 	bl	8004c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114a:	f7ff faed 	bl	8000728 <main>
  bx  lr    
 800114e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001150:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800115c:	08004cb4 	.word	0x08004cb4
  ldr r2, =_sbss
 8001160:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001164:	200001b4 	.word	0x200001b4

08001168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001170:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0d      	ldr	r2, [pc, #52]	@ (80011ac <HAL_Init+0x40>)
 8001176:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800117a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800117c:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <HAL_Init+0x40>)
 8001182:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001186:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a07      	ldr	r2, [pc, #28]	@ (80011ac <HAL_Init+0x40>)
 800118e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001192:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 fcfd 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f808 	bl	80011b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a0:	f7ff fdfc 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023c00 	.word	0x40023c00

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <HAL_InitTick+0x54>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <HAL_InitTick+0x58>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fd15 	bl	8001bfe <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f000 fcdd 	bl	8001baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	@ (800120c <HAL_InitTick+0x5c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000008 	.word	0x20000008
 8001208:	20000010 	.word	0x20000010
 800120c:	2000000c 	.word	0x2000000c

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000010 	.word	0x20000010
 8001234:	200001b0 	.word	0x200001b0

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	200001b0 	.word	0x200001b0

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffee 	bl	8001238 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b0a      	ldr	r3, [pc, #40]	@ (8001294 <HAL_Delay+0x44>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffde 	bl	8001238 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000010 	.word	0x20000010

08001298 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e033      	b.n	8001316 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d109      	bne.n	80012ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff fd98 	bl	8000dec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d118      	bne.n	8001308 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012de:	f023 0302 	bic.w	r3, r3, #2
 80012e2:	f043 0202 	orr.w	r2, r3, #2
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fa86 	bl	80017fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	f023 0303 	bic.w	r3, r3, #3
 80012fe:	f043 0201 	orr.w	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	641a      	str	r2, [r3, #64]	@ 0x40
 8001306:	e001      	b.n	800130c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001314:	7bfb      	ldrb	r3, [r7, #15]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <HAL_ADC_Start+0x1a>
 8001336:	2302      	movs	r3, #2
 8001338:	e097      	b.n	800146a <HAL_ADC_Start+0x14a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b01      	cmp	r3, #1
 800134e:	d018      	beq.n	8001382 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0201 	orr.w	r2, r2, #1
 800135e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001360:	4b45      	ldr	r3, [pc, #276]	@ (8001478 <HAL_ADC_Start+0x158>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a45      	ldr	r2, [pc, #276]	@ (800147c <HAL_ADC_Start+0x15c>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	0c9a      	lsrs	r2, r3, #18
 800136c:	4613      	mov	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001374:	e002      	b.n	800137c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	3b01      	subs	r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f9      	bne.n	8001376 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b01      	cmp	r3, #1
 800138e:	d15f      	bne.n	8001450 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013ba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013ce:	d106      	bne.n	80013de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d4:	f023 0206 	bic.w	r2, r3, #6
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	645a      	str	r2, [r3, #68]	@ 0x44
 80013dc:	e002      	b.n	80013e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013ec:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <HAL_ADC_Start+0x160>)
 80013ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80013f8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 031f 	and.w	r3, r3, #31
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10f      	bne.n	8001426 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d129      	bne.n	8001468 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	e020      	b.n	8001468 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a16      	ldr	r2, [pc, #88]	@ (8001484 <HAL_ADC_Start+0x164>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d11b      	bne.n	8001468 <HAL_ADC_Start+0x148>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d114      	bne.n	8001468 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	e00b      	b.n	8001468 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	f043 0210 	orr.w	r2, r3, #16
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001460:	f043 0201 	orr.w	r2, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000008 	.word	0x20000008
 800147c:	431bde83 	.word	0x431bde83
 8001480:	40012300 	.word	0x40012300
 8001484:	40012000 	.word	0x40012000

08001488 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014a4:	d113      	bne.n	80014ce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014b4:	d10b      	bne.n	80014ce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f043 0220 	orr.w	r2, r3, #32
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e063      	b.n	8001596 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ce:	f7ff feb3 	bl	8001238 <HAL_GetTick>
 80014d2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014d4:	e021      	b.n	800151a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014dc:	d01d      	beq.n	800151a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <HAL_ADC_PollForConversion+0x6c>
 80014e4:	f7ff fea8 	bl	8001238 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d212      	bcs.n	800151a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d00b      	beq.n	800151a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	f043 0204 	orr.w	r2, r3, #4
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e03d      	b.n	8001596 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b02      	cmp	r3, #2
 8001526:	d1d6      	bne.n	80014d6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f06f 0212 	mvn.w	r2, #18
 8001530:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d123      	bne.n	8001594 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001550:	2b00      	cmp	r3, #0
 8001552:	d11f      	bne.n	8001594 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800155e:	2b00      	cmp	r3, #0
 8001560:	d006      	beq.n	8001570 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800156c:	2b00      	cmp	r3, #0
 800156e:	d111      	bne.n	8001594 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001574:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001580:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d105      	bne.n	8001594 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158c:	f043 0201 	orr.w	r2, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x1c>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e105      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x228>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	d925      	bls.n	8001630 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68d9      	ldr	r1, [r3, #12]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	3b1e      	subs	r3, #30
 80015fa:	2207      	movs	r2, #7
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43da      	mvns	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	400a      	ands	r2, r1
 8001608:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68d9      	ldr	r1, [r3, #12]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	b29b      	uxth	r3, r3
 800161a:	4618      	mov	r0, r3
 800161c:	4603      	mov	r3, r0
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4403      	add	r3, r0
 8001622:	3b1e      	subs	r3, #30
 8001624:	409a      	lsls	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	e022      	b.n	8001676 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6919      	ldr	r1, [r3, #16]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	2207      	movs	r2, #7
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	400a      	ands	r2, r1
 8001652:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6919      	ldr	r1, [r3, #16]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	4603      	mov	r3, r0
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4403      	add	r3, r0
 800166c:	409a      	lsls	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b06      	cmp	r3, #6
 800167c:	d824      	bhi.n	80016c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	3b05      	subs	r3, #5
 8001690:	221f      	movs	r2, #31
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	400a      	ands	r2, r1
 800169e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	3b05      	subs	r3, #5
 80016ba:	fa00 f203 	lsl.w	r2, r0, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016c6:	e04c      	b.n	8001762 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b0c      	cmp	r3, #12
 80016ce:	d824      	bhi.n	800171a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	3b23      	subs	r3, #35	@ 0x23
 80016e2:	221f      	movs	r2, #31
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43da      	mvns	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	400a      	ands	r2, r1
 80016f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b23      	subs	r3, #35	@ 0x23
 800170c:	fa00 f203 	lsl.w	r2, r0, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	631a      	str	r2, [r3, #48]	@ 0x30
 8001718:	e023      	b.n	8001762 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	3b41      	subs	r3, #65	@ 0x41
 800172c:	221f      	movs	r2, #31
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	400a      	ands	r2, r1
 800173a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	4618      	mov	r0, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3b41      	subs	r3, #65	@ 0x41
 8001756:	fa00 f203 	lsl.w	r2, r0, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001762:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <HAL_ADC_ConfigChannel+0x234>)
 8001764:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a21      	ldr	r2, [pc, #132]	@ (80017f0 <HAL_ADC_ConfigChannel+0x238>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d109      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x1cc>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b12      	cmp	r3, #18
 8001776:	d105      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a19      	ldr	r2, [pc, #100]	@ (80017f0 <HAL_ADC_ConfigChannel+0x238>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d123      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x21e>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b10      	cmp	r3, #16
 8001794:	d003      	beq.n	800179e <HAL_ADC_ConfigChannel+0x1e6>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b11      	cmp	r3, #17
 800179c:	d11b      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b10      	cmp	r3, #16
 80017b0:	d111      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <HAL_ADC_ConfigChannel+0x23c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a10      	ldr	r2, [pc, #64]	@ (80017f8 <HAL_ADC_ConfigChannel+0x240>)
 80017b8:	fba2 2303 	umull	r2, r3, r2, r3
 80017bc:	0c9a      	lsrs	r2, r3, #18
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017c8:	e002      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f9      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40012300 	.word	0x40012300
 80017f0:	40012000 	.word	0x40012000
 80017f4:	20000008 	.word	0x20000008
 80017f8:	431bde83 	.word	0x431bde83

080017fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001804:	4b79      	ldr	r3, [pc, #484]	@ (80019ec <ADC_Init+0x1f0>)
 8001806:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	431a      	orrs	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001830:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	021a      	lsls	r2, r3, #8
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001854:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6859      	ldr	r1, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001876:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6899      	ldr	r1, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188e:	4a58      	ldr	r2, [pc, #352]	@ (80019f0 <ADC_Init+0x1f4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d022      	beq.n	80018da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6899      	ldr	r1, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6899      	ldr	r1, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	e00f      	b.n	80018fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0202 	bic.w	r2, r2, #2
 8001908:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6899      	ldr	r1, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7e1b      	ldrb	r3, [r3, #24]
 8001914:	005a      	lsls	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d01b      	beq.n	8001960 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001936:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001946:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6859      	ldr	r1, [r3, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	3b01      	subs	r3, #1
 8001954:	035a      	lsls	r2, r3, #13
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	e007      	b.n	8001970 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800196e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800197e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	3b01      	subs	r3, #1
 800198c:	051a      	lsls	r2, r3, #20
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6899      	ldr	r1, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019b2:	025a      	lsls	r2, r3, #9
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6899      	ldr	r1, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	029a      	lsls	r2, r3, #10
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	609a      	str	r2, [r3, #8]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	40012300 	.word	0x40012300
 80019f0:	0f000001 	.word	0x0f000001

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	@ (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	@ (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4907      	ldr	r1, [pc, #28]	@ (8001a90 <__NVIC_EnableIRQ+0x38>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	db0a      	blt.n	8001abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	490c      	ldr	r1, [pc, #48]	@ (8001ae0 <__NVIC_SetPriority+0x4c>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	0112      	lsls	r2, r2, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001abc:	e00a      	b.n	8001ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4908      	ldr	r1, [pc, #32]	@ (8001ae4 <__NVIC_SetPriority+0x50>)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3b04      	subs	r3, #4
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	761a      	strb	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000e100 	.word	0xe000e100
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	@ 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f1c3 0307 	rsb	r3, r3, #7
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	bf28      	it	cs
 8001b06:	2304      	movcs	r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d902      	bls.n	8001b18 <NVIC_EncodePriority+0x30>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3b03      	subs	r3, #3
 8001b16:	e000      	b.n	8001b1a <NVIC_EncodePriority+0x32>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	4313      	orrs	r3, r2
         );
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	@ 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b60:	d301      	bcc.n	8001b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00f      	b.n	8001b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b66:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <SysTick_Config+0x40>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6e:	210f      	movs	r1, #15
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f7ff ff8e 	bl	8001a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b78:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <SysTick_Config+0x40>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7e:	4b04      	ldr	r3, [pc, #16]	@ (8001b90 <SysTick_Config+0x40>)
 8001b80:	2207      	movs	r2, #7
 8001b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	e000e010 	.word	0xe000e010

08001b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff29 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbc:	f7ff ff3e 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	6978      	ldr	r0, [r7, #20]
 8001bc8:	f7ff ff8e 	bl	8001ae8 <NVIC_EncodePriority>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff5d 	bl	8001a94 <__NVIC_SetPriority>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff31 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffa2 	bl	8001b50 <SysTick_Config>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	@ 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e159      	b.n	8001ee8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c34:	2201      	movs	r2, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	f040 8148 	bne.w	8001ee2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d005      	beq.n	8001c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d130      	bne.n	8001ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 0201 	and.w	r2, r3, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d017      	beq.n	8001d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d123      	bne.n	8001d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	08da      	lsrs	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3208      	adds	r2, #8
 8001d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	08da      	lsrs	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3208      	adds	r2, #8
 8001d56:	69b9      	ldr	r1, [r7, #24]
 8001d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0203 	and.w	r2, r3, #3
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80a2 	beq.w	8001ee2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b57      	ldr	r3, [pc, #348]	@ (8001f00 <HAL_GPIO_Init+0x2e8>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da6:	4a56      	ldr	r2, [pc, #344]	@ (8001f00 <HAL_GPIO_Init+0x2e8>)
 8001da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dae:	4b54      	ldr	r3, [pc, #336]	@ (8001f00 <HAL_GPIO_Init+0x2e8>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dba:	4a52      	ldr	r2, [pc, #328]	@ (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a49      	ldr	r2, [pc, #292]	@ (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d019      	beq.n	8001e1a <HAL_GPIO_Init+0x202>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a48      	ldr	r2, [pc, #288]	@ (8001f0c <HAL_GPIO_Init+0x2f4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_GPIO_Init+0x1fe>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a47      	ldr	r2, [pc, #284]	@ (8001f10 <HAL_GPIO_Init+0x2f8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00d      	beq.n	8001e12 <HAL_GPIO_Init+0x1fa>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a46      	ldr	r2, [pc, #280]	@ (8001f14 <HAL_GPIO_Init+0x2fc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d007      	beq.n	8001e0e <HAL_GPIO_Init+0x1f6>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a45      	ldr	r2, [pc, #276]	@ (8001f18 <HAL_GPIO_Init+0x300>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d101      	bne.n	8001e0a <HAL_GPIO_Init+0x1f2>
 8001e06:	2304      	movs	r3, #4
 8001e08:	e008      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e004      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e002      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_GPIO_Init+0x204>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	f002 0203 	and.w	r2, r2, #3
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	4093      	lsls	r3, r2
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e2c:	4935      	ldr	r1, [pc, #212]	@ (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3302      	adds	r3, #2
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3a:	4b38      	ldr	r3, [pc, #224]	@ (8001f1c <HAL_GPIO_Init+0x304>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e5e:	4a2f      	ldr	r2, [pc, #188]	@ (8001f1c <HAL_GPIO_Init+0x304>)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e64:	4b2d      	ldr	r3, [pc, #180]	@ (8001f1c <HAL_GPIO_Init+0x304>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e88:	4a24      	ldr	r2, [pc, #144]	@ (8001f1c <HAL_GPIO_Init+0x304>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e8e:	4b23      	ldr	r3, [pc, #140]	@ (8001f1c <HAL_GPIO_Init+0x304>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8001f1c <HAL_GPIO_Init+0x304>)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <HAL_GPIO_Init+0x304>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001edc:	4a0f      	ldr	r2, [pc, #60]	@ (8001f1c <HAL_GPIO_Init+0x304>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b0f      	cmp	r3, #15
 8001eec:	f67f aea2 	bls.w	8001c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3724      	adds	r7, #36	@ 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40013800 	.word	0x40013800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40020800 	.word	0x40020800
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40013c00 	.word	0x40013c00

08001f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f3c:	e003      	b.n	8001f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	041a      	lsls	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	619a      	str	r2, [r3, #24]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e267      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d075      	beq.n	800205e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f72:	4b88      	ldr	r3, [pc, #544]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d00c      	beq.n	8001f98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7e:	4b85      	ldr	r3, [pc, #532]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d112      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8a:	4b82      	ldr	r3, [pc, #520]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f96:	d10b      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f98:	4b7e      	ldr	r3, [pc, #504]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d05b      	beq.n	800205c <HAL_RCC_OscConfig+0x108>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d157      	bne.n	800205c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e242      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fb8:	d106      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x74>
 8001fba:	4b76      	ldr	r3, [pc, #472]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a75      	ldr	r2, [pc, #468]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e01d      	b.n	8002004 <HAL_RCC_OscConfig+0xb0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0x98>
 8001fd2:	4b70      	ldr	r3, [pc, #448]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a6f      	ldr	r2, [pc, #444]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b6d      	ldr	r3, [pc, #436]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a6c      	ldr	r2, [pc, #432]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e00b      	b.n	8002004 <HAL_RCC_OscConfig+0xb0>
 8001fec:	4b69      	ldr	r3, [pc, #420]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a68      	ldr	r2, [pc, #416]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b66      	ldr	r3, [pc, #408]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a65      	ldr	r2, [pc, #404]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8001ffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d013      	beq.n	8002034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7ff f914 	bl	8001238 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002014:	f7ff f910 	bl	8001238 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	@ 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e207      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b5b      	ldr	r3, [pc, #364]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0xc0>
 8002032:	e014      	b.n	800205e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff f900 	bl	8001238 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800203c:	f7ff f8fc 	bl	8001238 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	@ 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e1f3      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204e:	4b51      	ldr	r3, [pc, #324]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0xe8>
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d063      	beq.n	8002132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800206a:	4b4a      	ldr	r3, [pc, #296]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002076:	4b47      	ldr	r3, [pc, #284]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800207e:	2b08      	cmp	r3, #8
 8002080:	d11c      	bne.n	80020bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002082:	4b44      	ldr	r3, [pc, #272]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d116      	bne.n	80020bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	4b41      	ldr	r3, [pc, #260]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x152>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e1c7      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4937      	ldr	r1, [pc, #220]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ba:	e03a      	b.n	8002132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c4:	4b34      	ldr	r3, [pc, #208]	@ (8002198 <HAL_RCC_OscConfig+0x244>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ca:	f7ff f8b5 	bl	8001238 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d2:	f7ff f8b1 	bl	8001238 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e1a8      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f0:	4b28      	ldr	r3, [pc, #160]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4925      	ldr	r1, [pc, #148]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
 8002104:	e015      	b.n	8002132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002106:	4b24      	ldr	r3, [pc, #144]	@ (8002198 <HAL_RCC_OscConfig+0x244>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7ff f894 	bl	8001238 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002114:	f7ff f890 	bl	8001238 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e187      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d036      	beq.n	80021ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d016      	beq.n	8002174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002146:	4b15      	ldr	r3, [pc, #84]	@ (800219c <HAL_RCC_OscConfig+0x248>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7ff f874 	bl	8001238 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002154:	f7ff f870 	bl	8001238 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e167      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002166:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <HAL_RCC_OscConfig+0x240>)
 8002168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x200>
 8002172:	e01b      	b.n	80021ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002174:	4b09      	ldr	r3, [pc, #36]	@ (800219c <HAL_RCC_OscConfig+0x248>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217a:	f7ff f85d 	bl	8001238 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002180:	e00e      	b.n	80021a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002182:	f7ff f859 	bl	8001238 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d907      	bls.n	80021a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e150      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
 8002194:	40023800 	.word	0x40023800
 8002198:	42470000 	.word	0x42470000
 800219c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a0:	4b88      	ldr	r3, [pc, #544]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1ea      	bne.n	8002182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8097 	beq.w	80022e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021be:	4b81      	ldr	r3, [pc, #516]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10f      	bne.n	80021ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	4b7d      	ldr	r3, [pc, #500]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	4a7c      	ldr	r2, [pc, #496]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021da:	4b7a      	ldr	r3, [pc, #488]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e6:	2301      	movs	r3, #1
 80021e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ea:	4b77      	ldr	r3, [pc, #476]	@ (80023c8 <HAL_RCC_OscConfig+0x474>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d118      	bne.n	8002228 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f6:	4b74      	ldr	r3, [pc, #464]	@ (80023c8 <HAL_RCC_OscConfig+0x474>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a73      	ldr	r2, [pc, #460]	@ (80023c8 <HAL_RCC_OscConfig+0x474>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002202:	f7ff f819 	bl	8001238 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220a:	f7ff f815 	bl	8001238 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e10c      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	4b6a      	ldr	r3, [pc, #424]	@ (80023c8 <HAL_RCC_OscConfig+0x474>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d106      	bne.n	800223e <HAL_RCC_OscConfig+0x2ea>
 8002230:	4b64      	ldr	r3, [pc, #400]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002234:	4a63      	ldr	r2, [pc, #396]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6713      	str	r3, [r2, #112]	@ 0x70
 800223c:	e01c      	b.n	8002278 <HAL_RCC_OscConfig+0x324>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b05      	cmp	r3, #5
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0x30c>
 8002246:	4b5f      	ldr	r3, [pc, #380]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224a:	4a5e      	ldr	r2, [pc, #376]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	6713      	str	r3, [r2, #112]	@ 0x70
 8002252:	4b5c      	ldr	r3, [pc, #368]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002256:	4a5b      	ldr	r2, [pc, #364]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6713      	str	r3, [r2, #112]	@ 0x70
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0x324>
 8002260:	4b58      	ldr	r3, [pc, #352]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002264:	4a57      	ldr	r2, [pc, #348]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	6713      	str	r3, [r2, #112]	@ 0x70
 800226c:	4b55      	ldr	r3, [pc, #340]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002270:	4a54      	ldr	r2, [pc, #336]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002272:	f023 0304 	bic.w	r3, r3, #4
 8002276:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d015      	beq.n	80022ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002280:	f7fe ffda 	bl	8001238 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002286:	e00a      	b.n	800229e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002288:	f7fe ffd6 	bl	8001238 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e0cb      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229e:	4b49      	ldr	r3, [pc, #292]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0ee      	beq.n	8002288 <HAL_RCC_OscConfig+0x334>
 80022aa:	e014      	b.n	80022d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7fe ffc4 	bl	8001238 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b2:	e00a      	b.n	80022ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b4:	f7fe ffc0 	bl	8001238 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e0b5      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ca:	4b3e      	ldr	r3, [pc, #248]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1ee      	bne.n	80022b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022d6:	7dfb      	ldrb	r3, [r7, #23]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d105      	bne.n	80022e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022dc:	4b39      	ldr	r3, [pc, #228]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	4a38      	ldr	r2, [pc, #224]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80a1 	beq.w	8002434 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022f2:	4b34      	ldr	r3, [pc, #208]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d05c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d141      	bne.n	800238a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	4b31      	ldr	r3, [pc, #196]	@ (80023cc <HAL_RCC_OscConfig+0x478>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7fe ff94 	bl	8001238 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002314:	f7fe ff90 	bl	8001238 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e087      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	4b27      	ldr	r3, [pc, #156]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002340:	019b      	lsls	r3, r3, #6
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002348:	085b      	lsrs	r3, r3, #1
 800234a:	3b01      	subs	r3, #1
 800234c:	041b      	lsls	r3, r3, #16
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002354:	061b      	lsls	r3, r3, #24
 8002356:	491b      	ldr	r1, [pc, #108]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800235c:	4b1b      	ldr	r3, [pc, #108]	@ (80023cc <HAL_RCC_OscConfig+0x478>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002362:	f7fe ff69 	bl	8001238 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236a:	f7fe ff65 	bl	8001238 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e05c      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237c:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x416>
 8002388:	e054      	b.n	8002434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238a:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <HAL_RCC_OscConfig+0x478>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7fe ff52 	bl	8001238 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002398:	f7fe ff4e 	bl	8001238 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e045      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023aa:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <HAL_RCC_OscConfig+0x470>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x444>
 80023b6:	e03d      	b.n	8002434 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e038      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40007000 	.word	0x40007000
 80023cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <HAL_RCC_OscConfig+0x4ec>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d028      	beq.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d121      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d11a      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002400:	4013      	ands	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002408:	4293      	cmp	r3, r2
 800240a:	d111      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	085b      	lsrs	r3, r3, #1
 8002418:	3b01      	subs	r3, #1
 800241a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d107      	bne.n	8002430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800

08002444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0cc      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002458:	4b68      	ldr	r3, [pc, #416]	@ (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d90c      	bls.n	8002480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b65      	ldr	r3, [pc, #404]	@ (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b63      	ldr	r3, [pc, #396]	@ (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0b8      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d020      	beq.n	80024ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002498:	4b59      	ldr	r3, [pc, #356]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a58      	ldr	r2, [pc, #352]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b0:	4b53      	ldr	r3, [pc, #332]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4a52      	ldr	r2, [pc, #328]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024bc:	4b50      	ldr	r3, [pc, #320]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	494d      	ldr	r1, [pc, #308]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d044      	beq.n	8002564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	4b47      	ldr	r3, [pc, #284]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d119      	bne.n	8002522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e07f      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d003      	beq.n	8002502 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002502:	4b3f      	ldr	r3, [pc, #252]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d109      	bne.n	8002522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e06f      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002512:	4b3b      	ldr	r3, [pc, #236]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e067      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002522:	4b37      	ldr	r3, [pc, #220]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f023 0203 	bic.w	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4934      	ldr	r1, [pc, #208]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	4313      	orrs	r3, r2
 8002532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002534:	f7fe fe80 	bl	8001238 <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	e00a      	b.n	8002552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253c:	f7fe fe7c 	bl	8001238 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e04f      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	4b2b      	ldr	r3, [pc, #172]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 020c 	and.w	r2, r3, #12
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	429a      	cmp	r2, r3
 8002562:	d1eb      	bne.n	800253c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002564:	4b25      	ldr	r3, [pc, #148]	@ (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d20c      	bcs.n	800258c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	4b22      	ldr	r3, [pc, #136]	@ (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b20      	ldr	r3, [pc, #128]	@ (80025fc <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e032      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002598:	4b19      	ldr	r3, [pc, #100]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4916      	ldr	r1, [pc, #88]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d009      	beq.n	80025ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b6:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	490e      	ldr	r1, [pc, #56]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ca:	f000 f821 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 80025ce:	4602      	mov	r2, r0
 80025d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	490a      	ldr	r1, [pc, #40]	@ (8002604 <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	5ccb      	ldrb	r3, [r1, r3]
 80025de:	fa22 f303 	lsr.w	r3, r2, r3
 80025e2:	4a09      	ldr	r2, [pc, #36]	@ (8002608 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80025e6:	4b09      	ldr	r3, [pc, #36]	@ (800260c <HAL_RCC_ClockConfig+0x1c8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fde0 	bl	80011b0 <HAL_InitTick>

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023c00 	.word	0x40023c00
 8002600:	40023800 	.word	0x40023800
 8002604:	08004c8c 	.word	0x08004c8c
 8002608:	20000008 	.word	0x20000008
 800260c:	2000000c 	.word	0x2000000c

08002610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002614:	b094      	sub	sp, #80	@ 0x50
 8002616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002628:	4b79      	ldr	r3, [pc, #484]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b08      	cmp	r3, #8
 8002632:	d00d      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x40>
 8002634:	2b08      	cmp	r3, #8
 8002636:	f200 80e1 	bhi.w	80027fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x34>
 800263e:	2b04      	cmp	r3, #4
 8002640:	d003      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x3a>
 8002642:	e0db      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b73      	ldr	r3, [pc, #460]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x204>)
 8002646:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002648:	e0db      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800264a:	4b73      	ldr	r3, [pc, #460]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x208>)
 800264c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800264e:	e0d8      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002650:	4b6f      	ldr	r3, [pc, #444]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002658:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800265a:	4b6d      	ldr	r3, [pc, #436]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d063      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002666:	4b6a      	ldr	r3, [pc, #424]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	099b      	lsrs	r3, r3, #6
 800266c:	2200      	movs	r2, #0
 800266e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002670:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002678:	633b      	str	r3, [r7, #48]	@ 0x30
 800267a:	2300      	movs	r3, #0
 800267c:	637b      	str	r3, [r7, #52]	@ 0x34
 800267e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002682:	4622      	mov	r2, r4
 8002684:	462b      	mov	r3, r5
 8002686:	f04f 0000 	mov.w	r0, #0
 800268a:	f04f 0100 	mov.w	r1, #0
 800268e:	0159      	lsls	r1, r3, #5
 8002690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002694:	0150      	lsls	r0, r2, #5
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4621      	mov	r1, r4
 800269c:	1a51      	subs	r1, r2, r1
 800269e:	6139      	str	r1, [r7, #16]
 80026a0:	4629      	mov	r1, r5
 80026a2:	eb63 0301 	sbc.w	r3, r3, r1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026b4:	4659      	mov	r1, fp
 80026b6:	018b      	lsls	r3, r1, #6
 80026b8:	4651      	mov	r1, sl
 80026ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026be:	4651      	mov	r1, sl
 80026c0:	018a      	lsls	r2, r1, #6
 80026c2:	4651      	mov	r1, sl
 80026c4:	ebb2 0801 	subs.w	r8, r2, r1
 80026c8:	4659      	mov	r1, fp
 80026ca:	eb63 0901 	sbc.w	r9, r3, r1
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026e2:	4690      	mov	r8, r2
 80026e4:	4699      	mov	r9, r3
 80026e6:	4623      	mov	r3, r4
 80026e8:	eb18 0303 	adds.w	r3, r8, r3
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	462b      	mov	r3, r5
 80026f0:	eb49 0303 	adc.w	r3, r9, r3
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002702:	4629      	mov	r1, r5
 8002704:	024b      	lsls	r3, r1, #9
 8002706:	4621      	mov	r1, r4
 8002708:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800270c:	4621      	mov	r1, r4
 800270e:	024a      	lsls	r2, r1, #9
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002716:	2200      	movs	r2, #0
 8002718:	62bb      	str	r3, [r7, #40]	@ 0x28
 800271a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800271c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002720:	f7fd fd58 	bl	80001d4 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4613      	mov	r3, r2
 800272a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800272c:	e058      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272e:	4b38      	ldr	r3, [pc, #224]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	099b      	lsrs	r3, r3, #6
 8002734:	2200      	movs	r2, #0
 8002736:	4618      	mov	r0, r3
 8002738:	4611      	mov	r1, r2
 800273a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800273e:	623b      	str	r3, [r7, #32]
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
 8002744:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002748:	4642      	mov	r2, r8
 800274a:	464b      	mov	r3, r9
 800274c:	f04f 0000 	mov.w	r0, #0
 8002750:	f04f 0100 	mov.w	r1, #0
 8002754:	0159      	lsls	r1, r3, #5
 8002756:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800275a:	0150      	lsls	r0, r2, #5
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4641      	mov	r1, r8
 8002762:	ebb2 0a01 	subs.w	sl, r2, r1
 8002766:	4649      	mov	r1, r9
 8002768:	eb63 0b01 	sbc.w	fp, r3, r1
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002778:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800277c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002780:	ebb2 040a 	subs.w	r4, r2, sl
 8002784:	eb63 050b 	sbc.w	r5, r3, fp
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	00eb      	lsls	r3, r5, #3
 8002792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002796:	00e2      	lsls	r2, r4, #3
 8002798:	4614      	mov	r4, r2
 800279a:	461d      	mov	r5, r3
 800279c:	4643      	mov	r3, r8
 800279e:	18e3      	adds	r3, r4, r3
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	464b      	mov	r3, r9
 80027a4:	eb45 0303 	adc.w	r3, r5, r3
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027b6:	4629      	mov	r1, r5
 80027b8:	028b      	lsls	r3, r1, #10
 80027ba:	4621      	mov	r1, r4
 80027bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027c0:	4621      	mov	r1, r4
 80027c2:	028a      	lsls	r2, r1, #10
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ca:	2200      	movs	r2, #0
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	61fa      	str	r2, [r7, #28]
 80027d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027d4:	f7fd fcfe 	bl	80001d4 <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4613      	mov	r3, r2
 80027de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	3301      	adds	r3, #1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80027f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027fa:	e002      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027fc:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x204>)
 80027fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002802:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002804:	4618      	mov	r0, r3
 8002806:	3750      	adds	r7, #80	@ 0x50
 8002808:	46bd      	mov	sp, r7
 800280a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	00f42400 	.word	0x00f42400
 8002818:	007a1200 	.word	0x007a1200

0800281c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002820:	4b03      	ldr	r3, [pc, #12]	@ (8002830 <HAL_RCC_GetHCLKFreq+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000008 	.word	0x20000008

08002834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002838:	f7ff fff0 	bl	800281c <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	0a9b      	lsrs	r3, r3, #10
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4903      	ldr	r1, [pc, #12]	@ (8002858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	08004c9c 	.word	0x08004c9c

0800285c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002860:	f7ff ffdc 	bl	800281c <HAL_RCC_GetHCLKFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b05      	ldr	r3, [pc, #20]	@ (800287c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	0b5b      	lsrs	r3, r3, #13
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4903      	ldr	r1, [pc, #12]	@ (8002880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40023800 	.word	0x40023800
 8002880:	08004c9c 	.word	0x08004c9c

08002884 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e07b      	b.n	800298e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	2b00      	cmp	r3, #0
 800289c:	d108      	bne.n	80028b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028a6:	d009      	beq.n	80028bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	61da      	str	r2, [r3, #28]
 80028ae:	e005      	b.n	80028bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe facc 	bl	8000e74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800292c:	431a      	orrs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002940:	ea42 0103 	orr.w	r1, r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002948:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	f003 0104 	and.w	r1, r3, #4
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	f003 0210 	and.w	r2, r3, #16
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69da      	ldr	r2, [r3, #28]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800297c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b088      	sub	sp, #32
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	603b      	str	r3, [r7, #0]
 80029a2:	4613      	mov	r3, r2
 80029a4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029a6:	f7fe fc47 	bl	8001238 <HAL_GetTick>
 80029aa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d001      	beq.n	80029c0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80029bc:	2302      	movs	r3, #2
 80029be:	e12a      	b.n	8002c16 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_SPI_Transmit+0x36>
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e122      	b.n	8002c16 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_SPI_Transmit+0x48>
 80029da:	2302      	movs	r3, #2
 80029dc:	e11b      	b.n	8002c16 <HAL_SPI_Transmit+0x280>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2203      	movs	r2, #3
 80029ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	88fa      	ldrh	r2, [r7, #6]
 80029fe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	88fa      	ldrh	r2, [r7, #6]
 8002a04:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a2c:	d10f      	bne.n	8002a4e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a58:	2b40      	cmp	r3, #64	@ 0x40
 8002a5a:	d007      	beq.n	8002a6c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a74:	d152      	bne.n	8002b1c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <HAL_SPI_Transmit+0xee>
 8002a7e:	8b7b      	ldrh	r3, [r7, #26]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d145      	bne.n	8002b10 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a88:	881a      	ldrh	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a94:	1c9a      	adds	r2, r3, #2
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002aa8:	e032      	b.n	8002b10 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d112      	bne.n	8002ade <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abc:	881a      	ldrh	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	1c9a      	adds	r2, r3, #2
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002adc:	e018      	b.n	8002b10 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ade:	f7fe fbab 	bl	8001238 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d803      	bhi.n	8002af6 <HAL_SPI_Transmit+0x160>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af4:	d102      	bne.n	8002afc <HAL_SPI_Transmit+0x166>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d109      	bne.n	8002b10 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e082      	b.n	8002c16 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1c7      	bne.n	8002aaa <HAL_SPI_Transmit+0x114>
 8002b1a:	e053      	b.n	8002bc4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <HAL_SPI_Transmit+0x194>
 8002b24:	8b7b      	ldrh	r3, [r7, #26]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d147      	bne.n	8002bba <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	330c      	adds	r3, #12
 8002b34:	7812      	ldrb	r2, [r2, #0]
 8002b36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b50:	e033      	b.n	8002bba <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d113      	bne.n	8002b88 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	330c      	adds	r3, #12
 8002b6a:	7812      	ldrb	r2, [r2, #0]
 8002b6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b86:	e018      	b.n	8002bba <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b88:	f7fe fb56 	bl	8001238 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d803      	bhi.n	8002ba0 <HAL_SPI_Transmit+0x20a>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d102      	bne.n	8002ba6 <HAL_SPI_Transmit+0x210>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d109      	bne.n	8002bba <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e02d      	b.n	8002c16 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1c6      	bne.n	8002b52 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	6839      	ldr	r1, [r7, #0]
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fbd9 	bl	8003380 <SPI_EndRxTxTransaction>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10a      	bne.n	8002bf8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002c14:	2300      	movs	r3, #0
  }
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3720      	adds	r7, #32
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b088      	sub	sp, #32
 8002c22:	af02      	add	r7, sp, #8
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	603b      	str	r3, [r7, #0]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d001      	beq.n	8002c3e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e104      	b.n	8002e48 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c46:	d112      	bne.n	8002c6e <HAL_SPI_Receive+0x50>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10e      	bne.n	8002c6e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2204      	movs	r2, #4
 8002c54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c58:	88fa      	ldrh	r2, [r7, #6]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f8f3 	bl	8002e50 <HAL_SPI_TransmitReceive>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	e0ec      	b.n	8002e48 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c6e:	f7fe fae3 	bl	8001238 <HAL_GetTick>
 8002c72:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_SPI_Receive+0x62>
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0e1      	b.n	8002e48 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_SPI_Receive+0x74>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e0da      	b.n	8002e48 <HAL_SPI_Receive+0x22a>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	88fa      	ldrh	r2, [r7, #6]
 8002cb2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	88fa      	ldrh	r2, [r7, #6]
 8002cb8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ce0:	d10f      	bne.n	8002d02 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cf0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d0c:	2b40      	cmp	r3, #64	@ 0x40
 8002d0e:	d007      	beq.n	8002d20 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d1e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d170      	bne.n	8002e0a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d28:	e035      	b.n	8002d96 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d115      	bne.n	8002d64 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f103 020c 	add.w	r2, r3, #12
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d44:	7812      	ldrb	r2, [r2, #0]
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d62:	e018      	b.n	8002d96 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d64:	f7fe fa68 	bl	8001238 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d803      	bhi.n	8002d7c <HAL_SPI_Receive+0x15e>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7a:	d102      	bne.n	8002d82 <HAL_SPI_Receive+0x164>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e058      	b.n	8002e48 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1c4      	bne.n	8002d2a <HAL_SPI_Receive+0x10c>
 8002da0:	e038      	b.n	8002e14 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d113      	bne.n	8002dd8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dba:	b292      	uxth	r2, r2
 8002dbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc2:	1c9a      	adds	r2, r3, #2
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002dd6:	e018      	b.n	8002e0a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dd8:	f7fe fa2e 	bl	8001238 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d803      	bhi.n	8002df0 <HAL_SPI_Receive+0x1d2>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dee:	d102      	bne.n	8002df6 <HAL_SPI_Receive+0x1d8>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e01e      	b.n	8002e48 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1c6      	bne.n	8002da2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	6839      	ldr	r1, [r7, #0]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 fa4b 	bl	80032b4 <SPI_EndRxTransaction>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002e46:	2300      	movs	r3, #0
  }
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	@ 0x28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e62:	f7fe f9e9 	bl	8001238 <HAL_GetTick>
 8002e66:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e6e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002e76:	887b      	ldrh	r3, [r7, #2]
 8002e78:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e7a:	7ffb      	ldrb	r3, [r7, #31]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d00c      	beq.n	8002e9a <HAL_SPI_TransmitReceive+0x4a>
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e86:	d106      	bne.n	8002e96 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d102      	bne.n	8002e96 <HAL_SPI_TransmitReceive+0x46>
 8002e90:	7ffb      	ldrb	r3, [r7, #31]
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d001      	beq.n	8002e9a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002e96:	2302      	movs	r3, #2
 8002e98:	e17f      	b.n	800319a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_SPI_TransmitReceive+0x5c>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_SPI_TransmitReceive+0x5c>
 8002ea6:	887b      	ldrh	r3, [r7, #2]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e174      	b.n	800319a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_SPI_TransmitReceive+0x6e>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e16d      	b.n	800319a <HAL_SPI_TransmitReceive+0x34a>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d003      	beq.n	8002eda <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2205      	movs	r2, #5
 8002ed6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	887a      	ldrh	r2, [r7, #2]
 8002eea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	887a      	ldrh	r2, [r7, #2]
 8002ef0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	887a      	ldrh	r2, [r7, #2]
 8002efc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	887a      	ldrh	r2, [r7, #2]
 8002f02:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f1a:	2b40      	cmp	r3, #64	@ 0x40
 8002f1c:	d007      	beq.n	8002f2e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f36:	d17e      	bne.n	8003036 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_SPI_TransmitReceive+0xf6>
 8002f40:	8afb      	ldrh	r3, [r7, #22]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d16c      	bne.n	8003020 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	881a      	ldrh	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	1c9a      	adds	r2, r3, #2
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f6a:	e059      	b.n	8003020 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d11b      	bne.n	8002fb2 <HAL_SPI_TransmitReceive+0x162>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d016      	beq.n	8002fb2 <HAL_SPI_TransmitReceive+0x162>
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d113      	bne.n	8002fb2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	881a      	ldrh	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	1c9a      	adds	r2, r3, #2
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d119      	bne.n	8002ff4 <HAL_SPI_TransmitReceive+0x1a4>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d014      	beq.n	8002ff4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd4:	b292      	uxth	r2, r2
 8002fd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fdc:	1c9a      	adds	r2, r3, #2
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ff4:	f7fe f920 	bl	8001238 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003000:	429a      	cmp	r2, r3
 8003002:	d80d      	bhi.n	8003020 <HAL_SPI_TransmitReceive+0x1d0>
 8003004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300a:	d009      	beq.n	8003020 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e0bc      	b.n	800319a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1a0      	bne.n	8002f6c <HAL_SPI_TransmitReceive+0x11c>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d19b      	bne.n	8002f6c <HAL_SPI_TransmitReceive+0x11c>
 8003034:	e082      	b.n	800313c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <HAL_SPI_TransmitReceive+0x1f4>
 800303e:	8afb      	ldrh	r3, [r7, #22]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d171      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	330c      	adds	r3, #12
 800304e:	7812      	ldrb	r2, [r2, #0]
 8003050:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800306a:	e05d      	b.n	8003128 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b02      	cmp	r3, #2
 8003078:	d11c      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x264>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d017      	beq.n	80030b4 <HAL_SPI_TransmitReceive+0x264>
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	2b01      	cmp	r3, #1
 8003088:	d114      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	330c      	adds	r3, #12
 8003094:	7812      	ldrb	r2, [r2, #0]
 8003096:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d119      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x2a6>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d014      	beq.n	80030f6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030f2:	2301      	movs	r3, #1
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030f6:	f7fe f89f 	bl	8001238 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003102:	429a      	cmp	r2, r3
 8003104:	d803      	bhi.n	800310e <HAL_SPI_TransmitReceive+0x2be>
 8003106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310c:	d102      	bne.n	8003114 <HAL_SPI_TransmitReceive+0x2c4>
 800310e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003110:	2b00      	cmp	r3, #0
 8003112:	d109      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e038      	b.n	800319a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d19c      	bne.n	800306c <HAL_SPI_TransmitReceive+0x21c>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d197      	bne.n	800306c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800313c:	6a3a      	ldr	r2, [r7, #32]
 800313e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f91d 	bl	8003380 <SPI_EndRxTxTransaction>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e01d      	b.n	800319a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003198:	2300      	movs	r3, #0
  }
}
 800319a:	4618      	mov	r0, r3
 800319c:	3728      	adds	r7, #40	@ 0x28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031b4:	f7fe f840 	bl	8001238 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	4413      	add	r3, r2
 80031c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031c4:	f7fe f838 	bl	8001238 <HAL_GetTick>
 80031c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031ca:	4b39      	ldr	r3, [pc, #228]	@ (80032b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	015b      	lsls	r3, r3, #5
 80031d0:	0d1b      	lsrs	r3, r3, #20
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	fb02 f303 	mul.w	r3, r2, r3
 80031d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031da:	e054      	b.n	8003286 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d050      	beq.n	8003286 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031e4:	f7fe f828 	bl	8001238 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d902      	bls.n	80031fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d13d      	bne.n	8003276 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003208:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003212:	d111      	bne.n	8003238 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800321c:	d004      	beq.n	8003228 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003226:	d107      	bne.n	8003238 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003236:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003240:	d10f      	bne.n	8003262 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003260:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e017      	b.n	80032a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	3b01      	subs	r3, #1
 8003284:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4013      	ands	r3, r2
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	429a      	cmp	r2, r3
 8003294:	bf0c      	ite	eq
 8003296:	2301      	moveq	r3, #1
 8003298:	2300      	movne	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d19b      	bne.n	80031dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3720      	adds	r7, #32
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000008 	.word	0x20000008

080032b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032c8:	d111      	bne.n	80032ee <SPI_EndRxTransaction+0x3a>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032d2:	d004      	beq.n	80032de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032dc:	d107      	bne.n	80032ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032f6:	d12a      	bne.n	800334e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003300:	d012      	beq.n	8003328 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2200      	movs	r2, #0
 800330a:	2180      	movs	r1, #128	@ 0x80
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7ff ff49 	bl	80031a4 <SPI_WaitFlagStateUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d02d      	beq.n	8003374 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e026      	b.n	8003376 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2200      	movs	r2, #0
 8003330:	2101      	movs	r1, #1
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7ff ff36 	bl	80031a4 <SPI_WaitFlagStateUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d01a      	beq.n	8003374 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003342:	f043 0220 	orr.w	r2, r3, #32
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e013      	b.n	8003376 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2200      	movs	r2, #0
 8003356:	2101      	movs	r1, #1
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f7ff ff23 	bl	80031a4 <SPI_WaitFlagStateUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e000      	b.n	8003376 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2201      	movs	r2, #1
 8003394:	2102      	movs	r1, #2
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f7ff ff04 	bl	80031a4 <SPI_WaitFlagStateUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a6:	f043 0220 	orr.w	r2, r3, #32
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e032      	b.n	8003418 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003420 <SPI_EndRxTxTransaction+0xa0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003424 <SPI_EndRxTxTransaction+0xa4>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	0d5b      	lsrs	r3, r3, #21
 80033be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033d0:	d112      	bne.n	80033f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2200      	movs	r2, #0
 80033da:	2180      	movs	r1, #128	@ 0x80
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f7ff fee1 	bl	80031a4 <SPI_WaitFlagStateUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d016      	beq.n	8003416 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ec:	f043 0220 	orr.w	r2, r3, #32
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e00f      	b.n	8003418 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	3b01      	subs	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340e:	2b80      	cmp	r3, #128	@ 0x80
 8003410:	d0f2      	beq.n	80033f8 <SPI_EndRxTxTransaction+0x78>
 8003412:	e000      	b.n	8003416 <SPI_EndRxTxTransaction+0x96>
        break;
 8003414:	bf00      	nop
  }

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000008 	.word	0x20000008
 8003424:	165e9f81 	.word	0x165e9f81

08003428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e041      	b.n	80034be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fd fd58 	bl	8000f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3304      	adds	r3, #4
 8003464:	4619      	mov	r1, r3
 8003466:	4610      	mov	r0, r2
 8003468:	f000 fcd8 	bl	8003e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d001      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e044      	b.n	800356a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003578 <HAL_TIM_Base_Start_IT+0xb0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d018      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x6c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350a:	d013      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x6c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1a      	ldr	r2, [pc, #104]	@ (800357c <HAL_TIM_Base_Start_IT+0xb4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00e      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x6c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a19      	ldr	r2, [pc, #100]	@ (8003580 <HAL_TIM_Base_Start_IT+0xb8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d009      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x6c>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a17      	ldr	r2, [pc, #92]	@ (8003584 <HAL_TIM_Base_Start_IT+0xbc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x6c>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a16      	ldr	r2, [pc, #88]	@ (8003588 <HAL_TIM_Base_Start_IT+0xc0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d111      	bne.n	8003558 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b06      	cmp	r3, #6
 8003544:	d010      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003556:	e007      	b.n	8003568 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40010000 	.word	0x40010000
 800357c:	40000400 	.word	0x40000400
 8003580:	40000800 	.word	0x40000800
 8003584:	40000c00 	.word	0x40000c00
 8003588:	40014000 	.word	0x40014000

0800358c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e041      	b.n	8003622 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f839 	bl	800362a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 fc26 	bl	8003e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d109      	bne.n	8003664 <HAL_TIM_PWM_Start+0x24>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e022      	b.n	80036aa <HAL_TIM_PWM_Start+0x6a>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b04      	cmp	r3, #4
 8003668:	d109      	bne.n	800367e <HAL_TIM_PWM_Start+0x3e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	bf14      	ite	ne
 8003676:	2301      	movne	r3, #1
 8003678:	2300      	moveq	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	e015      	b.n	80036aa <HAL_TIM_PWM_Start+0x6a>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d109      	bne.n	8003698 <HAL_TIM_PWM_Start+0x58>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e008      	b.n	80036aa <HAL_TIM_PWM_Start+0x6a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e068      	b.n	8003784 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d104      	bne.n	80036c2 <HAL_TIM_PWM_Start+0x82>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036c0:	e013      	b.n	80036ea <HAL_TIM_PWM_Start+0xaa>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d104      	bne.n	80036d2 <HAL_TIM_PWM_Start+0x92>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036d0:	e00b      	b.n	80036ea <HAL_TIM_PWM_Start+0xaa>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d104      	bne.n	80036e2 <HAL_TIM_PWM_Start+0xa2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036e0:	e003      	b.n	80036ea <HAL_TIM_PWM_Start+0xaa>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2201      	movs	r2, #1
 80036f0:	6839      	ldr	r1, [r7, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fed5 	bl	80044a2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a23      	ldr	r2, [pc, #140]	@ (800378c <HAL_TIM_PWM_Start+0x14c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d107      	bne.n	8003712 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003710:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1d      	ldr	r2, [pc, #116]	@ (800378c <HAL_TIM_PWM_Start+0x14c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d018      	beq.n	800374e <HAL_TIM_PWM_Start+0x10e>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003724:	d013      	beq.n	800374e <HAL_TIM_PWM_Start+0x10e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a19      	ldr	r2, [pc, #100]	@ (8003790 <HAL_TIM_PWM_Start+0x150>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00e      	beq.n	800374e <HAL_TIM_PWM_Start+0x10e>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a17      	ldr	r2, [pc, #92]	@ (8003794 <HAL_TIM_PWM_Start+0x154>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d009      	beq.n	800374e <HAL_TIM_PWM_Start+0x10e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a16      	ldr	r2, [pc, #88]	@ (8003798 <HAL_TIM_PWM_Start+0x158>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d004      	beq.n	800374e <HAL_TIM_PWM_Start+0x10e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a14      	ldr	r2, [pc, #80]	@ (800379c <HAL_TIM_PWM_Start+0x15c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d111      	bne.n	8003772 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b06      	cmp	r3, #6
 800375e:	d010      	beq.n	8003782 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003770:	e007      	b.n	8003782 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0201 	orr.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40010000 	.word	0x40010000
 8003790:	40000400 	.word	0x40000400
 8003794:	40000800 	.word	0x40000800
 8003798:	40000c00 	.word	0x40000c00
 800379c:	40014000 	.word	0x40014000

080037a0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e041      	b.n	8003838 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d106      	bne.n	80037ce <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f839 	bl	8003840 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2202      	movs	r2, #2
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3304      	adds	r3, #4
 80037de:	4619      	mov	r1, r3
 80037e0:	4610      	mov	r0, r2
 80037e2:	f000 fb1b 	bl	8003e1c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0208 	bic.w	r2, r2, #8
 80037f4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6819      	ldr	r1, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d020      	beq.n	80038b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d01b      	beq.n	80038b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0202 	mvn.w	r2, #2
 8003888:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fa9d 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 80038a4:	e005      	b.n	80038b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fa8f 	bl	8003dca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 faa0 	bl	8003df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d020      	beq.n	8003904 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01b      	beq.n	8003904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0204 	mvn.w	r2, #4
 80038d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2202      	movs	r2, #2
 80038da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fa77 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fa69 	bl	8003dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fa7a 	bl	8003df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d020      	beq.n	8003950 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01b      	beq.n	8003950 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0208 	mvn.w	r2, #8
 8003920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2204      	movs	r2, #4
 8003926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fa51 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 800393c:	e005      	b.n	800394a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fa43 	bl	8003dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fa54 	bl	8003df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f003 0310 	and.w	r3, r3, #16
 8003956:	2b00      	cmp	r3, #0
 8003958:	d020      	beq.n	800399c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01b      	beq.n	800399c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0210 	mvn.w	r2, #16
 800396c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2208      	movs	r2, #8
 8003972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fa2b 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 8003988:	e005      	b.n	8003996 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fa1d 	bl	8003dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fa2e 	bl	8003df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00c      	beq.n	80039c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d007      	beq.n	80039c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0201 	mvn.w	r2, #1
 80039b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fd f998 	bl	8000cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00c      	beq.n	80039e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d007      	beq.n	80039e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fe4e 	bl	8004680 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00c      	beq.n	8003a08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d007      	beq.n	8003a08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f9ff 	bl	8003e06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00c      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0220 	mvn.w	r2, #32
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fe20 	bl	800466c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e0ae      	b.n	8003bb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b0c      	cmp	r3, #12
 8003a5e:	f200 809f 	bhi.w	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a62:	a201      	add	r2, pc, #4	@ (adr r2, 8003a68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a68:	08003a9d 	.word	0x08003a9d
 8003a6c:	08003ba1 	.word	0x08003ba1
 8003a70:	08003ba1 	.word	0x08003ba1
 8003a74:	08003ba1 	.word	0x08003ba1
 8003a78:	08003add 	.word	0x08003add
 8003a7c:	08003ba1 	.word	0x08003ba1
 8003a80:	08003ba1 	.word	0x08003ba1
 8003a84:	08003ba1 	.word	0x08003ba1
 8003a88:	08003b1f 	.word	0x08003b1f
 8003a8c:	08003ba1 	.word	0x08003ba1
 8003a90:	08003ba1 	.word	0x08003ba1
 8003a94:	08003ba1 	.word	0x08003ba1
 8003a98:	08003b5f 	.word	0x08003b5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fa46 	bl	8003f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0208 	orr.w	r2, r2, #8
 8003ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0204 	bic.w	r2, r2, #4
 8003ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6999      	ldr	r1, [r3, #24]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	619a      	str	r2, [r3, #24]
      break;
 8003ada:	e064      	b.n	8003ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fa8c 	bl	8004000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6999      	ldr	r1, [r3, #24]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	021a      	lsls	r2, r3, #8
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	619a      	str	r2, [r3, #24]
      break;
 8003b1c:	e043      	b.n	8003ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fad7 	bl	80040d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0208 	orr.w	r2, r2, #8
 8003b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0204 	bic.w	r2, r2, #4
 8003b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69d9      	ldr	r1, [r3, #28]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	61da      	str	r2, [r3, #28]
      break;
 8003b5c:	e023      	b.n	8003ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fb21 	bl	80041ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69da      	ldr	r2, [r3, #28]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69d9      	ldr	r1, [r3, #28]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	021a      	lsls	r2, r3, #8
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	61da      	str	r2, [r3, #28]
      break;
 8003b9e:	e002      	b.n	8003ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIM_ConfigClockSource+0x1c>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e0b4      	b.n	8003d3e <HAL_TIM_ConfigClockSource+0x186>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c0c:	d03e      	beq.n	8003c8c <HAL_TIM_ConfigClockSource+0xd4>
 8003c0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c12:	f200 8087 	bhi.w	8003d24 <HAL_TIM_ConfigClockSource+0x16c>
 8003c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c1a:	f000 8086 	beq.w	8003d2a <HAL_TIM_ConfigClockSource+0x172>
 8003c1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c22:	d87f      	bhi.n	8003d24 <HAL_TIM_ConfigClockSource+0x16c>
 8003c24:	2b70      	cmp	r3, #112	@ 0x70
 8003c26:	d01a      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0xa6>
 8003c28:	2b70      	cmp	r3, #112	@ 0x70
 8003c2a:	d87b      	bhi.n	8003d24 <HAL_TIM_ConfigClockSource+0x16c>
 8003c2c:	2b60      	cmp	r3, #96	@ 0x60
 8003c2e:	d050      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x11a>
 8003c30:	2b60      	cmp	r3, #96	@ 0x60
 8003c32:	d877      	bhi.n	8003d24 <HAL_TIM_ConfigClockSource+0x16c>
 8003c34:	2b50      	cmp	r3, #80	@ 0x50
 8003c36:	d03c      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0xfa>
 8003c38:	2b50      	cmp	r3, #80	@ 0x50
 8003c3a:	d873      	bhi.n	8003d24 <HAL_TIM_ConfigClockSource+0x16c>
 8003c3c:	2b40      	cmp	r3, #64	@ 0x40
 8003c3e:	d058      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x13a>
 8003c40:	2b40      	cmp	r3, #64	@ 0x40
 8003c42:	d86f      	bhi.n	8003d24 <HAL_TIM_ConfigClockSource+0x16c>
 8003c44:	2b30      	cmp	r3, #48	@ 0x30
 8003c46:	d064      	beq.n	8003d12 <HAL_TIM_ConfigClockSource+0x15a>
 8003c48:	2b30      	cmp	r3, #48	@ 0x30
 8003c4a:	d86b      	bhi.n	8003d24 <HAL_TIM_ConfigClockSource+0x16c>
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	d060      	beq.n	8003d12 <HAL_TIM_ConfigClockSource+0x15a>
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d867      	bhi.n	8003d24 <HAL_TIM_ConfigClockSource+0x16c>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d05c      	beq.n	8003d12 <HAL_TIM_ConfigClockSource+0x15a>
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d05a      	beq.n	8003d12 <HAL_TIM_ConfigClockSource+0x15a>
 8003c5c:	e062      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c6e:	f000 fbf8 	bl	8004462 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	609a      	str	r2, [r3, #8]
      break;
 8003c8a:	e04f      	b.n	8003d2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c9c:	f000 fbe1 	bl	8004462 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cae:	609a      	str	r2, [r3, #8]
      break;
 8003cb0:	e03c      	b.n	8003d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f000 fb55 	bl	800436e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2150      	movs	r1, #80	@ 0x50
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fbae 	bl	800442c <TIM_ITRx_SetConfig>
      break;
 8003cd0:	e02c      	b.n	8003d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f000 fb74 	bl	80043cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2160      	movs	r1, #96	@ 0x60
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fb9e 	bl	800442c <TIM_ITRx_SetConfig>
      break;
 8003cf0:	e01c      	b.n	8003d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f000 fb35 	bl	800436e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2140      	movs	r1, #64	@ 0x40
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fb8e 	bl	800442c <TIM_ITRx_SetConfig>
      break;
 8003d10:	e00c      	b.n	8003d2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	f000 fb85 	bl	800442c <TIM_ITRx_SetConfig>
      break;
 8003d22:	e003      	b.n	8003d2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
      break;
 8003d28:	e000      	b.n	8003d2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_TIM_SlaveConfigSynchro+0x18>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e031      	b.n	8003dc2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003d6e:	6839      	ldr	r1, [r7, #0]
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fa6b 	bl	800424c <TIM_SlaveTimer_SetConfig>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d009      	beq.n	8003d90 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e018      	b.n	8003dc2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d9e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003dae:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a3a      	ldr	r2, [pc, #232]	@ (8003f18 <TIM_Base_SetConfig+0xfc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00f      	beq.n	8003e54 <TIM_Base_SetConfig+0x38>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e3a:	d00b      	beq.n	8003e54 <TIM_Base_SetConfig+0x38>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a37      	ldr	r2, [pc, #220]	@ (8003f1c <TIM_Base_SetConfig+0x100>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d007      	beq.n	8003e54 <TIM_Base_SetConfig+0x38>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a36      	ldr	r2, [pc, #216]	@ (8003f20 <TIM_Base_SetConfig+0x104>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <TIM_Base_SetConfig+0x38>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a35      	ldr	r2, [pc, #212]	@ (8003f24 <TIM_Base_SetConfig+0x108>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d108      	bne.n	8003e66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a2b      	ldr	r2, [pc, #172]	@ (8003f18 <TIM_Base_SetConfig+0xfc>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01b      	beq.n	8003ea6 <TIM_Base_SetConfig+0x8a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e74:	d017      	beq.n	8003ea6 <TIM_Base_SetConfig+0x8a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a28      	ldr	r2, [pc, #160]	@ (8003f1c <TIM_Base_SetConfig+0x100>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <TIM_Base_SetConfig+0x8a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a27      	ldr	r2, [pc, #156]	@ (8003f20 <TIM_Base_SetConfig+0x104>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00f      	beq.n	8003ea6 <TIM_Base_SetConfig+0x8a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a26      	ldr	r2, [pc, #152]	@ (8003f24 <TIM_Base_SetConfig+0x108>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00b      	beq.n	8003ea6 <TIM_Base_SetConfig+0x8a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a25      	ldr	r2, [pc, #148]	@ (8003f28 <TIM_Base_SetConfig+0x10c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d007      	beq.n	8003ea6 <TIM_Base_SetConfig+0x8a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a24      	ldr	r2, [pc, #144]	@ (8003f2c <TIM_Base_SetConfig+0x110>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <TIM_Base_SetConfig+0x8a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a23      	ldr	r2, [pc, #140]	@ (8003f30 <TIM_Base_SetConfig+0x114>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d108      	bne.n	8003eb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a0e      	ldr	r2, [pc, #56]	@ (8003f18 <TIM_Base_SetConfig+0xfc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d103      	bne.n	8003eec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d105      	bne.n	8003f0a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	f023 0201 	bic.w	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	611a      	str	r2, [r3, #16]
  }
}
 8003f0a:	bf00      	nop
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40010000 	.word	0x40010000
 8003f1c:	40000400 	.word	0x40000400
 8003f20:	40000800 	.word	0x40000800
 8003f24:	40000c00 	.word	0x40000c00
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40014400 	.word	0x40014400
 8003f30:	40014800 	.word	0x40014800

08003f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f023 0201 	bic.w	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0303 	bic.w	r3, r3, #3
 8003f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f023 0302 	bic.w	r3, r3, #2
 8003f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003ffc <TIM_OC1_SetConfig+0xc8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d10c      	bne.n	8003faa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f023 0308 	bic.w	r3, r3, #8
 8003f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f023 0304 	bic.w	r3, r3, #4
 8003fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a13      	ldr	r2, [pc, #76]	@ (8003ffc <TIM_OC1_SetConfig+0xc8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d111      	bne.n	8003fd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	621a      	str	r2, [r3, #32]
}
 8003ff0:	bf00      	nop
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40010000 	.word	0x40010000

08004000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	f023 0210 	bic.w	r2, r3, #16
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800402e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 0320 	bic.w	r3, r3, #32
 800404a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a1e      	ldr	r2, [pc, #120]	@ (80040d4 <TIM_OC2_SetConfig+0xd4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d10d      	bne.n	800407c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800407a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a15      	ldr	r2, [pc, #84]	@ (80040d4 <TIM_OC2_SetConfig+0xd4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d113      	bne.n	80040ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800408a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40010000 	.word	0x40010000

080040d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0303 	bic.w	r3, r3, #3
 800410e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a1d      	ldr	r2, [pc, #116]	@ (80041a8 <TIM_OC3_SetConfig+0xd0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d10d      	bne.n	8004152 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800413c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a14      	ldr	r2, [pc, #80]	@ (80041a8 <TIM_OC3_SetConfig+0xd0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d113      	bne.n	8004182 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	621a      	str	r2, [r3, #32]
}
 800419c:	bf00      	nop
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	40010000 	.word	0x40010000

080041ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	021b      	lsls	r3, r3, #8
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	031b      	lsls	r3, r3, #12
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a10      	ldr	r2, [pc, #64]	@ (8004248 <TIM_OC4_SetConfig+0x9c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d109      	bne.n	8004220 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004212:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	019b      	lsls	r3, r3, #6
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	621a      	str	r2, [r3, #32]
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40010000 	.word	0x40010000

0800424c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004268:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f023 0307 	bic.w	r3, r3, #7
 800427a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b70      	cmp	r3, #112	@ 0x70
 8004294:	d01a      	beq.n	80042cc <TIM_SlaveTimer_SetConfig+0x80>
 8004296:	2b70      	cmp	r3, #112	@ 0x70
 8004298:	d860      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x110>
 800429a:	2b60      	cmp	r3, #96	@ 0x60
 800429c:	d054      	beq.n	8004348 <TIM_SlaveTimer_SetConfig+0xfc>
 800429e:	2b60      	cmp	r3, #96	@ 0x60
 80042a0:	d85c      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x110>
 80042a2:	2b50      	cmp	r3, #80	@ 0x50
 80042a4:	d046      	beq.n	8004334 <TIM_SlaveTimer_SetConfig+0xe8>
 80042a6:	2b50      	cmp	r3, #80	@ 0x50
 80042a8:	d858      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x110>
 80042aa:	2b40      	cmp	r3, #64	@ 0x40
 80042ac:	d019      	beq.n	80042e2 <TIM_SlaveTimer_SetConfig+0x96>
 80042ae:	2b40      	cmp	r3, #64	@ 0x40
 80042b0:	d854      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x110>
 80042b2:	2b30      	cmp	r3, #48	@ 0x30
 80042b4:	d055      	beq.n	8004362 <TIM_SlaveTimer_SetConfig+0x116>
 80042b6:	2b30      	cmp	r3, #48	@ 0x30
 80042b8:	d850      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x110>
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d051      	beq.n	8004362 <TIM_SlaveTimer_SetConfig+0x116>
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d84c      	bhi.n	800435c <TIM_SlaveTimer_SetConfig+0x110>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d04d      	beq.n	8004362 <TIM_SlaveTimer_SetConfig+0x116>
 80042c6:	2b10      	cmp	r3, #16
 80042c8:	d04b      	beq.n	8004362 <TIM_SlaveTimer_SetConfig+0x116>
 80042ca:	e047      	b.n	800435c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80042dc:	f000 f8c1 	bl	8004462 <TIM_ETR_SetConfig>
      break;
 80042e0:	e040      	b.n	8004364 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b05      	cmp	r3, #5
 80042e8:	d101      	bne.n	80042ee <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e03b      	b.n	8004366 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6a1a      	ldr	r2, [r3, #32]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0201 	bic.w	r2, r2, #1
 8004304:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004314:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	4313      	orrs	r3, r2
 8004320:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	621a      	str	r2, [r3, #32]
      break;
 8004332:	e017      	b.n	8004364 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004340:	461a      	mov	r2, r3
 8004342:	f000 f814 	bl	800436e <TIM_TI1_ConfigInputStage>
      break;
 8004346:	e00d      	b.n	8004364 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004354:	461a      	mov	r2, r3
 8004356:	f000 f839 	bl	80043cc <TIM_TI2_ConfigInputStage>
      break;
 800435a:	e003      	b.n	8004364 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	75fb      	strb	r3, [r7, #23]
      break;
 8004360:	e000      	b.n	8004364 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004362:	bf00      	nop
  }

  return status;
 8004364:	7dfb      	ldrb	r3, [r7, #23]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800436e:	b480      	push	{r7}
 8004370:	b087      	sub	sp, #28
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	f023 0201 	bic.w	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004398:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f023 030a 	bic.w	r3, r3, #10
 80043aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	621a      	str	r2, [r3, #32]
}
 80043c0:	bf00      	nop
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f023 0210 	bic.w	r2, r3, #16
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	031b      	lsls	r3, r3, #12
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004408:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	621a      	str	r2, [r3, #32]
}
 8004420:	bf00      	nop
 8004422:	371c      	adds	r7, #28
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004442:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	f043 0307 	orr.w	r3, r3, #7
 800444e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	609a      	str	r2, [r3, #8]
}
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004462:	b480      	push	{r7}
 8004464:	b087      	sub	sp, #28
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800447c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	021a      	lsls	r2, r3, #8
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	431a      	orrs	r2, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4313      	orrs	r3, r2
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	609a      	str	r2, [r3, #8]
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b087      	sub	sp, #28
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	2201      	movs	r2, #1
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a1a      	ldr	r2, [r3, #32]
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	43db      	mvns	r3, r3
 80044c4:	401a      	ands	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1a      	ldr	r2, [r3, #32]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	fa01 f303 	lsl.w	r3, r1, r3
 80044da:	431a      	orrs	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	621a      	str	r2, [r3, #32]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004500:	2302      	movs	r3, #2
 8004502:	e050      	b.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1c      	ldr	r2, [pc, #112]	@ (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d018      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004550:	d013      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a18      	ldr	r2, [pc, #96]	@ (80045b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00e      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a16      	ldr	r2, [pc, #88]	@ (80045bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d009      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a15      	ldr	r2, [pc, #84]	@ (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d004      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a13      	ldr	r2, [pc, #76]	@ (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d10c      	bne.n	8004594 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004580:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	4313      	orrs	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40010000 	.word	0x40010000
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40000800 	.word	0x40000800
 80045c0:	40000c00 	.word	0x40000c00
 80045c4:	40014000 	.word	0x40014000

080045c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e03d      	b.n	8004660 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e042      	b.n	800472c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fc fc98 	bl	8000ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2224      	movs	r2, #36	@ 0x24
 80046c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f82b 	bl	8004734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800470c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004738:	b0c0      	sub	sp, #256	@ 0x100
 800473a:	af00      	add	r7, sp, #0
 800473c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800474c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004750:	68d9      	ldr	r1, [r3, #12]
 8004752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	ea40 0301 	orr.w	r3, r0, r1
 800475c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800475e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	431a      	orrs	r2, r3
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	431a      	orrs	r2, r3
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800478c:	f021 010c 	bic.w	r1, r1, #12
 8004790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800479a:	430b      	orrs	r3, r1
 800479c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800479e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80047aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ae:	6999      	ldr	r1, [r3, #24]
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	ea40 0301 	orr.w	r3, r0, r1
 80047ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	4b8f      	ldr	r3, [pc, #572]	@ (8004a00 <UART_SetConfig+0x2cc>)
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d005      	beq.n	80047d4 <UART_SetConfig+0xa0>
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004a04 <UART_SetConfig+0x2d0>)
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d104      	bne.n	80047de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047d4:	f7fe f842 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 80047d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80047dc:	e003      	b.n	80047e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047de:	f7fe f829 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 80047e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047f0:	f040 810c 	bne.w	8004a0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047f8:	2200      	movs	r2, #0
 80047fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80047fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004802:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004806:	4622      	mov	r2, r4
 8004808:	462b      	mov	r3, r5
 800480a:	1891      	adds	r1, r2, r2
 800480c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800480e:	415b      	adcs	r3, r3
 8004810:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004812:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004816:	4621      	mov	r1, r4
 8004818:	eb12 0801 	adds.w	r8, r2, r1
 800481c:	4629      	mov	r1, r5
 800481e:	eb43 0901 	adc.w	r9, r3, r1
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800482e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004832:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004836:	4690      	mov	r8, r2
 8004838:	4699      	mov	r9, r3
 800483a:	4623      	mov	r3, r4
 800483c:	eb18 0303 	adds.w	r3, r8, r3
 8004840:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004844:	462b      	mov	r3, r5
 8004846:	eb49 0303 	adc.w	r3, r9, r3
 800484a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800484e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800485a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800485e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004862:	460b      	mov	r3, r1
 8004864:	18db      	adds	r3, r3, r3
 8004866:	653b      	str	r3, [r7, #80]	@ 0x50
 8004868:	4613      	mov	r3, r2
 800486a:	eb42 0303 	adc.w	r3, r2, r3
 800486e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004870:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004874:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004878:	f7fb fcac 	bl	80001d4 <__aeabi_uldivmod>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4b61      	ldr	r3, [pc, #388]	@ (8004a08 <UART_SetConfig+0x2d4>)
 8004882:	fba3 2302 	umull	r2, r3, r3, r2
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	011c      	lsls	r4, r3, #4
 800488a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800488e:	2200      	movs	r2, #0
 8004890:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004894:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004898:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800489c:	4642      	mov	r2, r8
 800489e:	464b      	mov	r3, r9
 80048a0:	1891      	adds	r1, r2, r2
 80048a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048a4:	415b      	adcs	r3, r3
 80048a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048ac:	4641      	mov	r1, r8
 80048ae:	eb12 0a01 	adds.w	sl, r2, r1
 80048b2:	4649      	mov	r1, r9
 80048b4:	eb43 0b01 	adc.w	fp, r3, r1
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048cc:	4692      	mov	sl, r2
 80048ce:	469b      	mov	fp, r3
 80048d0:	4643      	mov	r3, r8
 80048d2:	eb1a 0303 	adds.w	r3, sl, r3
 80048d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048da:	464b      	mov	r3, r9
 80048dc:	eb4b 0303 	adc.w	r3, fp, r3
 80048e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80048f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80048f8:	460b      	mov	r3, r1
 80048fa:	18db      	adds	r3, r3, r3
 80048fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80048fe:	4613      	mov	r3, r2
 8004900:	eb42 0303 	adc.w	r3, r2, r3
 8004904:	647b      	str	r3, [r7, #68]	@ 0x44
 8004906:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800490a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800490e:	f7fb fc61 	bl	80001d4 <__aeabi_uldivmod>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4611      	mov	r1, r2
 8004918:	4b3b      	ldr	r3, [pc, #236]	@ (8004a08 <UART_SetConfig+0x2d4>)
 800491a:	fba3 2301 	umull	r2, r3, r3, r1
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	2264      	movs	r2, #100	@ 0x64
 8004922:	fb02 f303 	mul.w	r3, r2, r3
 8004926:	1acb      	subs	r3, r1, r3
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800492e:	4b36      	ldr	r3, [pc, #216]	@ (8004a08 <UART_SetConfig+0x2d4>)
 8004930:	fba3 2302 	umull	r2, r3, r3, r2
 8004934:	095b      	lsrs	r3, r3, #5
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800493c:	441c      	add	r4, r3
 800493e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004942:	2200      	movs	r2, #0
 8004944:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004948:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800494c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004950:	4642      	mov	r2, r8
 8004952:	464b      	mov	r3, r9
 8004954:	1891      	adds	r1, r2, r2
 8004956:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004958:	415b      	adcs	r3, r3
 800495a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800495c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004960:	4641      	mov	r1, r8
 8004962:	1851      	adds	r1, r2, r1
 8004964:	6339      	str	r1, [r7, #48]	@ 0x30
 8004966:	4649      	mov	r1, r9
 8004968:	414b      	adcs	r3, r1
 800496a:	637b      	str	r3, [r7, #52]	@ 0x34
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004978:	4659      	mov	r1, fp
 800497a:	00cb      	lsls	r3, r1, #3
 800497c:	4651      	mov	r1, sl
 800497e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004982:	4651      	mov	r1, sl
 8004984:	00ca      	lsls	r2, r1, #3
 8004986:	4610      	mov	r0, r2
 8004988:	4619      	mov	r1, r3
 800498a:	4603      	mov	r3, r0
 800498c:	4642      	mov	r2, r8
 800498e:	189b      	adds	r3, r3, r2
 8004990:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004994:	464b      	mov	r3, r9
 8004996:	460a      	mov	r2, r1
 8004998:	eb42 0303 	adc.w	r3, r2, r3
 800499c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80049b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049b4:	460b      	mov	r3, r1
 80049b6:	18db      	adds	r3, r3, r3
 80049b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ba:	4613      	mov	r3, r2
 80049bc:	eb42 0303 	adc.w	r3, r2, r3
 80049c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80049ca:	f7fb fc03 	bl	80001d4 <__aeabi_uldivmod>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a08 <UART_SetConfig+0x2d4>)
 80049d4:	fba3 1302 	umull	r1, r3, r3, r2
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	2164      	movs	r1, #100	@ 0x64
 80049dc:	fb01 f303 	mul.w	r3, r1, r3
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	3332      	adds	r3, #50	@ 0x32
 80049e6:	4a08      	ldr	r2, [pc, #32]	@ (8004a08 <UART_SetConfig+0x2d4>)
 80049e8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ec:	095b      	lsrs	r3, r3, #5
 80049ee:	f003 0207 	and.w	r2, r3, #7
 80049f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4422      	add	r2, r4
 80049fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049fc:	e106      	b.n	8004c0c <UART_SetConfig+0x4d8>
 80049fe:	bf00      	nop
 8004a00:	40011000 	.word	0x40011000
 8004a04:	40011400 	.word	0x40011400
 8004a08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a10:	2200      	movs	r2, #0
 8004a12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a1e:	4642      	mov	r2, r8
 8004a20:	464b      	mov	r3, r9
 8004a22:	1891      	adds	r1, r2, r2
 8004a24:	6239      	str	r1, [r7, #32]
 8004a26:	415b      	adcs	r3, r3
 8004a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a2e:	4641      	mov	r1, r8
 8004a30:	1854      	adds	r4, r2, r1
 8004a32:	4649      	mov	r1, r9
 8004a34:	eb43 0501 	adc.w	r5, r3, r1
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	00eb      	lsls	r3, r5, #3
 8004a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a46:	00e2      	lsls	r2, r4, #3
 8004a48:	4614      	mov	r4, r2
 8004a4a:	461d      	mov	r5, r3
 8004a4c:	4643      	mov	r3, r8
 8004a4e:	18e3      	adds	r3, r4, r3
 8004a50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a54:	464b      	mov	r3, r9
 8004a56:	eb45 0303 	adc.w	r3, r5, r3
 8004a5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	008b      	lsls	r3, r1, #2
 8004a7e:	4621      	mov	r1, r4
 8004a80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a84:	4621      	mov	r1, r4
 8004a86:	008a      	lsls	r2, r1, #2
 8004a88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004a8c:	f7fb fba2 	bl	80001d4 <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4b60      	ldr	r3, [pc, #384]	@ (8004c18 <UART_SetConfig+0x4e4>)
 8004a96:	fba3 2302 	umull	r2, r3, r3, r2
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	011c      	lsls	r4, r3, #4
 8004a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004aa8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004aac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	1891      	adds	r1, r2, r2
 8004ab6:	61b9      	str	r1, [r7, #24]
 8004ab8:	415b      	adcs	r3, r3
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	1851      	adds	r1, r2, r1
 8004ac4:	6139      	str	r1, [r7, #16]
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	414b      	adcs	r3, r1
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ad8:	4659      	mov	r1, fp
 8004ada:	00cb      	lsls	r3, r1, #3
 8004adc:	4651      	mov	r1, sl
 8004ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	00ca      	lsls	r2, r1, #3
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4603      	mov	r3, r0
 8004aec:	4642      	mov	r2, r8
 8004aee:	189b      	adds	r3, r3, r2
 8004af0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004af4:	464b      	mov	r3, r9
 8004af6:	460a      	mov	r2, r1
 8004af8:	eb42 0303 	adc.w	r3, r2, r3
 8004afc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b18:	4649      	mov	r1, r9
 8004b1a:	008b      	lsls	r3, r1, #2
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b22:	4641      	mov	r1, r8
 8004b24:	008a      	lsls	r2, r1, #2
 8004b26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b2a:	f7fb fb53 	bl	80001d4 <__aeabi_uldivmod>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4611      	mov	r1, r2
 8004b34:	4b38      	ldr	r3, [pc, #224]	@ (8004c18 <UART_SetConfig+0x4e4>)
 8004b36:	fba3 2301 	umull	r2, r3, r3, r1
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	2264      	movs	r2, #100	@ 0x64
 8004b3e:	fb02 f303 	mul.w	r3, r2, r3
 8004b42:	1acb      	subs	r3, r1, r3
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	3332      	adds	r3, #50	@ 0x32
 8004b48:	4a33      	ldr	r2, [pc, #204]	@ (8004c18 <UART_SetConfig+0x4e4>)
 8004b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b54:	441c      	add	r4, r3
 8004b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b64:	4642      	mov	r2, r8
 8004b66:	464b      	mov	r3, r9
 8004b68:	1891      	adds	r1, r2, r2
 8004b6a:	60b9      	str	r1, [r7, #8]
 8004b6c:	415b      	adcs	r3, r3
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b74:	4641      	mov	r1, r8
 8004b76:	1851      	adds	r1, r2, r1
 8004b78:	6039      	str	r1, [r7, #0]
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	414b      	adcs	r3, r1
 8004b7e:	607b      	str	r3, [r7, #4]
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b8c:	4659      	mov	r1, fp
 8004b8e:	00cb      	lsls	r3, r1, #3
 8004b90:	4651      	mov	r1, sl
 8004b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b96:	4651      	mov	r1, sl
 8004b98:	00ca      	lsls	r2, r1, #3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	189b      	adds	r3, r3, r2
 8004ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	460a      	mov	r2, r1
 8004baa:	eb42 0303 	adc.w	r3, r2, r3
 8004bae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bba:	667a      	str	r2, [r7, #100]	@ 0x64
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004bc8:	4649      	mov	r1, r9
 8004bca:	008b      	lsls	r3, r1, #2
 8004bcc:	4641      	mov	r1, r8
 8004bce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bd2:	4641      	mov	r1, r8
 8004bd4:	008a      	lsls	r2, r1, #2
 8004bd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004bda:	f7fb fafb 	bl	80001d4 <__aeabi_uldivmod>
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	4b0d      	ldr	r3, [pc, #52]	@ (8004c18 <UART_SetConfig+0x4e4>)
 8004be4:	fba3 1302 	umull	r1, r3, r3, r2
 8004be8:	095b      	lsrs	r3, r3, #5
 8004bea:	2164      	movs	r1, #100	@ 0x64
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	3332      	adds	r3, #50	@ 0x32
 8004bf6:	4a08      	ldr	r2, [pc, #32]	@ (8004c18 <UART_SetConfig+0x4e4>)
 8004bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfc:	095b      	lsrs	r3, r3, #5
 8004bfe:	f003 020f 	and.w	r2, r3, #15
 8004c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4422      	add	r2, r4
 8004c0a:	609a      	str	r2, [r3, #8]
}
 8004c0c:	bf00      	nop
 8004c0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c12:	46bd      	mov	sp, r7
 8004c14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c18:	51eb851f 	.word	0x51eb851f

08004c1c <memset>:
 8004c1c:	4402      	add	r2, r0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d100      	bne.n	8004c26 <memset+0xa>
 8004c24:	4770      	bx	lr
 8004c26:	f803 1b01 	strb.w	r1, [r3], #1
 8004c2a:	e7f9      	b.n	8004c20 <memset+0x4>

08004c2c <__libc_init_array>:
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8004c64 <__libc_init_array+0x38>)
 8004c30:	4c0d      	ldr	r4, [pc, #52]	@ (8004c68 <__libc_init_array+0x3c>)
 8004c32:	1b64      	subs	r4, r4, r5
 8004c34:	10a4      	asrs	r4, r4, #2
 8004c36:	2600      	movs	r6, #0
 8004c38:	42a6      	cmp	r6, r4
 8004c3a:	d109      	bne.n	8004c50 <__libc_init_array+0x24>
 8004c3c:	4d0b      	ldr	r5, [pc, #44]	@ (8004c6c <__libc_init_array+0x40>)
 8004c3e:	4c0c      	ldr	r4, [pc, #48]	@ (8004c70 <__libc_init_array+0x44>)
 8004c40:	f000 f818 	bl	8004c74 <_init>
 8004c44:	1b64      	subs	r4, r4, r5
 8004c46:	10a4      	asrs	r4, r4, #2
 8004c48:	2600      	movs	r6, #0
 8004c4a:	42a6      	cmp	r6, r4
 8004c4c:	d105      	bne.n	8004c5a <__libc_init_array+0x2e>
 8004c4e:	bd70      	pop	{r4, r5, r6, pc}
 8004c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c54:	4798      	blx	r3
 8004c56:	3601      	adds	r6, #1
 8004c58:	e7ee      	b.n	8004c38 <__libc_init_array+0xc>
 8004c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c5e:	4798      	blx	r3
 8004c60:	3601      	adds	r6, #1
 8004c62:	e7f2      	b.n	8004c4a <__libc_init_array+0x1e>
 8004c64:	08004cac 	.word	0x08004cac
 8004c68:	08004cac 	.word	0x08004cac
 8004c6c:	08004cac 	.word	0x08004cac
 8004c70:	08004cb0 	.word	0x08004cb0

08004c74 <_init>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	bf00      	nop
 8004c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7a:	bc08      	pop	{r3}
 8004c7c:	469e      	mov	lr, r3
 8004c7e:	4770      	bx	lr

08004c80 <_fini>:
 8004c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c82:	bf00      	nop
 8004c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c86:	bc08      	pop	{r3}
 8004c88:	469e      	mov	lr, r3
 8004c8a:	4770      	bx	lr
